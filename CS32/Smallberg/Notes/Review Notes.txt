CS32 - Introduction to Computer Science II

Class Design
	#include <iostream>

	using namespace std;
	
	class Circle{
	private:
		//class invariant: r > 0
		double x;
		double y;
		double r;

	public:
		Circle(double x, double y, double r);

		double getX();
		double getY();
		double getR();
		bool scale(double scalar);
		void draw();

	};
	
	Circle::Circle(double x, double y, double r){
		this->x = x;
		this->y = y;
		if( r > 0 )
			this->r = r;
	}

	bool Circle::scale(double scalar){
		if(scalar > 0){
			this->r *= scalar;
			return true;
		}else
			return false;
	}

	void Circle::draw(){
		//implementation
	}

	double Circle::getX(){
		return this->x;
	}
	double Circle::getY(){
		return this->y;
	}
	double Circle::getR(){
		return this->r;
	}
	double area(Circle c);

	int main(){
		Circle blah(8, -3, 3.7);
		Circle c(-2, 5, 10);
		if(!c.scale(2)){
			//Handle error
		}
		c.draw();

		cout << area(c);	//not a member function. If it was, then would have been called like c.area();
		return 0;
	}

	double area(Circle c){
		...
	}

Building an Executable
	
	C++ Source code (Circle.cpp) ----COMPILER---> Object file (Circle.obj) ------------LINKER--------> Executable File (.exe)
									         |
					      Libraries------------LINKER--------|


	Object Files
		Object files include machine language definition of main function and two tables. One table defines what they have, and the other defines what the code needs 
		(Circle's constructor, Circle's scale, Circle's draw, area, cout, etc.).

	Libraries
		Collection of definitions (<<, sqrt, strlen, etc.).
	
Seperate Compilation
	Put declarations in .h (header) files and definitions in .cpp files. Remember to include appropriate .h files. Every .h file should guard against multiple definitions. (#ifndef, #define, #endif)

	Circular Dependencies
		If you have a circular dependency, use class declarations rather than including the appropriate files. Additionally, if you use a class declaration, you MUST use pointers to that class since
		pointer memory allocation is standard (we don't know how much memory to allocate if we don't have the full declaration).

		You have to #include the header file defining a class when
			1. You declare a data member of that class  type
			2. You declare a container (e.g. a vector) of objects of that class type
			3. You create an object of that class type
			4. You use a member of that class type

		class Blah{
			public:
				void g(Foo f, Foo& fr, Foo* fp); //just need to say class Foo;
			private:
				Foo m_f;	//must #include Foo.h
		}

	Compiler and Construction of Objects
		1. ---------
		2. Construct the data members, consulting the member initialization list
		3. Execute the body of the constructor

		Side Note with Structs
			struct Employee{
				string name;
				double salary;
				int age;
			};

			Employee e;

			C++ makes a default constructor since there is no constructor here. Thus salary and age has undefined/garbage values, and name's default constructor is invoked (so name == "").

Memory Management
	Let's build a String class. It should take a cstring to initialize it. For instance:
		
		void h(){
			String s("Hello");
			...
		}

		int main(){
			String t;
			for(...)
				h();
			...

			return 0;
		}

	So let's build the class.
	
		class String{
			private:
				char* text;	//NULL-terminated and dynamically allocated char array.
				int size;	//size >= 0
			public:
				String(const char* value = "");
				String(const String& other);
				~String();
				
				String& operator =(const String& s);
		}

		String::String(const char* value){
			if(value == nullptr){
				value = "";
			}
			this->size = strlen(value);
			this->text = new char[this->size + 1];
			strcpy(this->text, value);
		}

		String::~String(){
			delete [] this->text;
		}

		String::String(const String& other){
			this->size = other.size;
			text = new char[size + 1];
			strcpy(text, other.text);
		}

		String& String::operator =(const String& s){
			delete [] text;
			this->size = s.size;
			this->text = new char[size + 1];
			strcpy(this->text, s.text);
		



		//MORE EFFICIENT IMPLEMENTATION OF operator overload

		//The Copy-and-Swap

		String& String::operator==(const String& rhs){
			if(this!= &rhs){
				String temp(rhs);
				swap(temp);
			}
		}

		void String::swap(String& other){
			//swap the text member
			//swap the size member
		}
	Destructors and Destruction of Objects
		1. Execute the body of the destructor
		2. Destroy the data members (doing nothing for built in types)
		3. --------------
