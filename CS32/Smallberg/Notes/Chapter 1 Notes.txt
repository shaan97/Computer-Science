Data Structures
	Data Structures We've Encountered
		Arrays - contiguous block of data with a fixed size determined at compile time, i.e. int a[100];
		Dynamic Arrays - contiguous block of data with a size that can be determined at run time. Implemented with pointers, i.e. int * a = new int[...];

	Dynamically Resizable Array
		If a dynamic array runs out of room, we create a new and larger array to accomadate more data. This would be encapsulated in a ADT.

	Linked Lists
		All nodes are linked to each other via a pointer, not by contiguous allocation done in arrays.

		struct Node{
			<TypeName> data;
			Node* next;
		};

		Node* head;
	Stacks
		Create an empty stack. You can
			PUSH an item onto the stack
			POP an item off the stack
			Look at the TOP of the stack
			Is the stack EMPTY
			==================
			How many items are in the stack?
			LOOK at any item in the stack
		//LIFO List

		#include <stack>

		using namespace std;

		int main(){
			stack<int> s;
			s.push(10);
			s.push(20);

			int n = s.top();
			s.pop();		//undefined behavior IF the stack is empty
			if(!s.empty())
				cout << s.size() << endl;
			


			return 0;
		}

	Queues
		Create an empty queue. You can
			ENQUEUE an item into the queue
			DEQUEUE an item from the queue
			Look at the FRONT item in the queue
			Is the queue EMPTY
			==================
			How many items are in teh queue?
			Look at the back item of the queue
			Look at any item in teh queue


		//FIFO List

		#include <queue>
		
		using namespace std;

		int main(){
			queue<int> q;
			q.push(10);
			q.push(20);

			int n = q.front();
			q.pop();		//undefined behavior IF the queue is empty
			if(!q.empty())
			{
				cout << q.size() << endl;
				cout << q.back() << endl;
			}
			

			return 0;
		}

		