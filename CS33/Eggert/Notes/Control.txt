Control
	Instructions
		%rip is an instruction pointer that points at the next instruction to be executed.
		Constant Width Instruction Model
			+ Decoding is simpler
			- Takes more RAM
		Varying-Length Instructions
			- Decoding is harder
			+ Takes less RAM
	Assembly Language
		C Code
			//prod.c
			long prodq(long x, long y){
				return x * y;
			}
		Assembly (optimized)
			prod: movq %rdi, %rax
			      mulq %rsi, %rax
	  		      ret
		objdump
			prod:
				O: 48 89 f8 mov %rdi, %rax
				3: 48 0f af c6 imul %rsi, %rax
				7: c3		retq
		Assembly (not optimized)
			prod:	pushq %rbp
				movq %rsp, %rbp
				movq %rdi, -8(%rbp)
				movq %rsi, -16(%rbp)
				movq -8(%rbp), %rax
				imulq -16(%rbp), %rax
				popq %rbp
				ret

			Stack
				%rsp points to top of stack. Pushing something will cause it to decrement. New data comes in an earlier address.

		
		5 Main Instructions
			- Unary Integer Instruction
				incq D		D++
				decq D		D--
				negq D		D = -D
				notq D		D = ~D
			- Binary Instructions
				addq S,D	D += S
				subq S,D	D -= S
				xorq S,D	D ^= S
				orq  S,D	D |= S
				andq S,D	D &= S
			- Address
				leaq S,D	D = &S		(Note: S HAS to be a memory location, cannot be a register)
			- Shifts
				salq S,D	D <<= S		(signed) (differs from shlq in whether it sets R flag for overflow)
				sarq S,D	D >>= S		(signed)
				shlq S,D	D <<= S		(unsigned) (differs from salq in whether it sets R flag for overflow)
				shrq S,D	D >>= S		(unsigned)

			- Flags
				cmpl a,b	b - a 		set flags
				tstl a,b	b & a 		set flags

				setz D		D = ZF
				sets D		D = SF
				setns D		D = !SF
				setb D		D = CF
				setg D		D = !(ZF | (SF ^ OF))

		
		Note: cqto == (rdx:rax) <-- sign extend(rax)

	Daily Example
		long absdiff(long a, long b){
			long diff = b-a;
			return diff < 0 ? -diff: diff;
		}
		
		long absdiff1(longa, long b){
			return a < b ? b - a : a - b;
		}

		long absdiv(long a, long b){
			return a < b ? b/a : a/b;
		}


		absdiff:	movq %rsi, %rax
				subq %rdi, %rax
				cqto
				xorq %rdx, %rax
				subq %rdx, %rax
				ret

		absdiff1:	movq %rsi, %rdx
				movq %rdi, %rax
				subq %rdi, %rdx
				subq %rsi, %rax
				cmpq %rsi, %rdi
				cmovl %rdx, %rax (this is a conditional move
				ret

		absdiv:		cmpq	%rsi, %rdi
				jl	.L9
				movq	%rdi, %rax
				cqto
				idivq	%rsi
				ret
	
		.L9:		movq	%rsi, %rax
				cqto
				idivq	%rdi		(must be in %rdx, %rax)
				ret