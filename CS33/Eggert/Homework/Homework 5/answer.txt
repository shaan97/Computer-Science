12.18)

A. UNSAFE
B. SAFE
C. UNSAFE

Note to Reader: The question (12.18) didn't ask us to explain, so I focused more time on other problems.

12.24)

ssize_t rio_readn(int fd, void *usrbuf, size_t n);		// This function is reentrant, as it uses no globals, posing it no risk in the case of an interrupt.

ssize_t rio_writen(int fd, void *usrbuf, size_t n);		// This function is reentrant, as it uses no globals, posing it no risk in the case of an interrupt.

void rio_readinitb(rio_t *rp, int fd);				// This function is as the book defines as implicitly reentrant, as the argument rio_t *rp poses the risk that
								// an interrupt may lead to the altering of that structure, thus altering the function's behavior. If that structure
								// is not altered, then it is known as implicitly reentrant.

static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n);	// This function is NOT reentrant, because it returns a static variable, which could possibly be altered
								// by an interrupt just before returning it. Because it is static, an interrupt could alter that return value
								// just beforehand, making the return value incorrect.

ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen);  // This function is NOT reentrant, because it uses rio_read, a function we have shown is not reentrant. A function
								// that uses a nonreentrant function is thus nonreentrant itself, for the uncertainty in rio_read's return value
								// makes the return value for rio_readlineb also uncertain.

ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n);		// This function is NOT reentrant, because it uses rio_read, a function we have shown is not reentrant. A function
								// that uses a nonreentrant function is thus nonreentrant itself, for the uncertainty in rio_read's return value
								// makes the return value for rio_readnb also uncertain.
