int x = random();
int y = random();
int z = random();

double dx = (double) x;
double dy = (double) y;
double dz = (double) z;

A. (float) x == (float) dx

This would always be true. Converting from int to double preserves the entire value of int exactly for all possibly binary representations.
Thus converting from int -> double -> float is the same as converting from int -> float.

B. dx - dy == (double) (x - y)

This could be false.
Example: x = TMIN
	 y = 1

The double values would essentially represent the same value. However, integer overflow will result in (x - y) being INT_MAX, so (double) (x - y) would be
the floating point representation of INT_MAX. dx - dy would actually be the floating point representation of INT_MIN - 1, which would not overflow due to 
double's higher range.

This argument also depends on whether -fwrapv is set or not, since this example is depending on integer overflow. If it is not set, then there would be no integer
overflow and behavior would be undefined.

C. (dx + dy) + dz == dx + (dy + dz)

This would always be true. Though doubles don't normally have associativity, these doubles are restricted to the range [INT_MIN, INT_MAX], in which there
is no overflow in this sum. In this interval, any sum could fit within a double, so this associativity is valid.

D. (dx * dy) * dz == dx * (dy * dz)

This could be false. For instance assume dx and dy are multiplicative inverses, with dy > 1, and dz is the largest number representable as a double. Then the left side
(dx * dy) * dz == 1 * dz == dz. The right side would be dx * (dy * dz) == dx * (infinity) == (infinity). Thus this is not always true.

E. dx / dx == dz / dz

This could be false. For instance let dx = 1, dz = 0. dx / dx == 1, and dz / dz == NaN. Thus it is not always true.