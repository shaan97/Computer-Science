
0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

0x0000000000541d1a	2584	  switch (code)


0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)


0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=786420) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=786420) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd6b0) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

2617	      args[argnum] = val;

XINT (a=786420) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd6b0) at data.c:2619
2619	      switch (code)

0x0000000000541da9	2619	      switch (code)

0x0000000000541dab	2619	      switch (code)

2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e33	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e39	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e3f	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e42	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e48	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e52	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e54	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e57	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5a	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5d	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5f	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

2645		    accum *= next;

0x0000000000541f44	2645		    accum *= next;

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541dd4	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541dd7	2602	  for (argnum = 0; argnum < nargs; argnum++)

2604	      if (! overflow)

0x0000000000541de0	2604	      if (! overflow)

0x0000000000542018	2635		  accum = argnum ? accum - next : nargs == 1 ? - next : next;

0x000000000054201d	2635		  accum = argnum ? accum - next : nargs == 1 ? - next : next;

0x0000000000542022	2635		  accum = argnum ? accum - next : nargs == 1 ? - next : next;

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=9174767) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=9174767) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd6b0) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=196605, argnum=argnum@entry=1, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd6b0) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=9174767) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=9174767) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=196605, argnum=argnum@entry=1, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd6b0) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=9174767) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=1, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd6b0)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=117963) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba26c0) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=117963) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba26c0) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=117963) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=117963, f=12199623) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1460		    v1 = POP;

1461		    TOP = arithcompare (TOP, v1, ARITH_GRTR_OR_EQUAL);

1460		    v1 = POP;

0x000000000058b2ee	1460		    v1 = POP;

1461		    TOP = arithcompare (TOP, v1, ARITH_GRTR_OR_EQUAL);

1460		    v1 = POP;

1461		    TOP = arithcompare (TOP, v1, ARITH_GRTR_OR_EQUAL);

0x000000000058b2fd	1461		    TOP = arithcompare (TOP, v1, ARITH_GRTR_OR_EQUAL);

0x000000000058b300	1461		    TOP = arithcompare (TOP, v1, ARITH_GRTR_OR_EQUAL);

0x000000000058b305	1461		    TOP = arithcompare (TOP, v1, ARITH_GRTR_OR_EQUAL);

1463		    NEXT;

0x000000000058b30d	1463		    NEXT;

0x000000000058b311	1463		    NEXT;

0x000000000058b315	1463		    NEXT;

0x000000000058b318	1463		    NEXT;

0x000000000058b31b	1463		    NEXT;

0x000000000058b323	1463		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

978		      BYTE_CODE_QUIT;

0x000000000058c7b0	978		      BYTE_CODE_QUIT;

0x000000000058c7b3	978		      BYTE_CODE_QUIT;

0x000000000058c7c2	978		      BYTE_CODE_QUIT;

0x000000000058c7c9	978		      BYTE_CODE_QUIT;

0x000000000058c7cb	978		      BYTE_CODE_QUIT;

975		  op = FETCH2;

0x000000000058c7d0	975		  op = FETCH2;

0x000000000058c7d3	975		  op = FETCH2;

980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7d9	980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7dd	980		      stack.pc = stack.byte_string_start + op;

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1223		  TOP = NILP (TOP) ? Qt : Qnil;

NILP (x=12223666) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:1223
1223		  TOP = NILP (TOP) ? Qt : Qnil;

0x000000000058ae91	1223		  TOP = NILP (TOP) ? Qt : Qnil;

0x000000000058ae99	1223		  TOP = NILP (TOP) ? Qt : Qnil;

1224		  NEXT;

0x000000000058aea0	1224		  NEXT;

0x000000000058aea4	1224		  NEXT;

0x000000000058aea8	1224		  NEXT;

0x000000000058aeab	1224		  NEXT;

0x000000000058aeae	1224		  NEXT;

0x000000000058aeb6	1224		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

982		  else DISCARD (1);

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1229		    v1 = POP;

0x000000000058ac96	1229		    v1 = POP;

0x000000000058ac99	1229		    v1 = POP;

1230		    TOP = Fcons (TOP, v1);

1229		    v1 = POP;

1230		    TOP = Fcons (TOP, v1);

0x000000000058aca8	1230		    TOP = Fcons (TOP, v1);

0x000000000058acab	1230		    TOP = Fcons (TOP, v1);

0x000000000058acb0	1230		    TOP = Fcons (TOP, v1);

1231		    NEXT;

0x000000000058acb8	1231		    NEXT;

0x000000000058acbc	1231		    NEXT;

0x000000000058acc0	1231		    NEXT;

0x000000000058acc3	1231		    NEXT;

0x000000000058acc6	1231		    NEXT;

0x000000000058acce	1231		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1229		    v1 = POP;

0x000000000058ac96	1229		    v1 = POP;

0x000000000058ac99	1229		    v1 = POP;

1230		    TOP = Fcons (TOP, v1);

1229		    v1 = POP;

1230		    TOP = Fcons (TOP, v1);

0x000000000058aca8	1230		    TOP = Fcons (TOP, v1);

0x000000000058acab	1230		    TOP = Fcons (TOP, v1);

0x000000000058acb0	1230		    TOP = Fcons (TOP, v1);

1231		    NEXT;

0x000000000058acb8	1231		    NEXT;

0x000000000058acbc	1231		    NEXT;

0x000000000058acc0	1231		    NEXT;

0x000000000058acc3	1231		    NEXT;

0x000000000058acc6	1231		    NEXT;

0x000000000058acce	1231		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1241		    v1 = POP;

0x000000000058ad08	1241		    v1 = POP;

0x000000000058ad0b	1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

0x000000000058ad1a	1242		    TOP = list2 (TOP, v1);

0x000000000058ad1d	1242		    TOP = list2 (TOP, v1);

0x000000000058ad22	1242		    TOP = list2 (TOP, v1);

1243		    NEXT;

0x000000000058ad2a	1243		    NEXT;

0x000000000058ad2e	1243		    NEXT;

0x000000000058ad32	1243		    NEXT;

0x000000000058ad35	1243		    NEXT;

0x000000000058ad38	1243		    NEXT;

0x000000000058ad40	1243		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a07d	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a575	1212		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

922		  op = FETCH;

0x0000000000589e25	922		  op = FETCH;

0x0000000000589e29	922		  op = FETCH;

0x0000000000589e2d	922		  op = FETCH;

923		  goto dounbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9814693, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9814565, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffd870) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9814565, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffd870) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9814565, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffd870) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=24, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=24, value=12223666) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=24, value=12223666) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=24, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd868) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd868) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9161141, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9161045, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffda10) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9161045, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffda10) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9161045, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffda10) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=16, value=18202189) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=18202189) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=16, value=18202189) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffda08) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffda08) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e69	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

922		  op = FETCH;

0x0000000000589e25	922		  op = FETCH;

0x0000000000589e29	922		  op = FETCH;

0x0000000000589e2d	922		  op = FETCH;

923		  goto dounbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9810677, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9810589, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffdbd0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9810589, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffdbd0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9810589, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffdbd0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=8, value=18202189) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=8, value=18202189) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=8, value=18202189) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdbc8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdbc8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fd5	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fd0	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9805789, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9805709, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffdd90) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9805709, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffdd90) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9805709, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffdd90) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=7, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=7, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdd88) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdd88) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

790		    v1 = POP;

0x0000000000589f48	790		    v1 = POP;

0x0000000000589f4b	790		    v1 = POP;

791		    TOP = Fmemq (TOP, v1);

790		    v1 = POP;

791		    TOP = Fmemq (TOP, v1);

0x0000000000589f5a	791		    TOP = Fmemq (TOP, v1);

0x0000000000589f5d	791		    TOP = Fmemq (TOP, v1);

0x0000000000589f62	791		    TOP = Fmemq (TOP, v1);

793		    NEXT;

0x0000000000589f6a	793		    NEXT;

0x0000000000589f6e	793		    NEXT;

0x0000000000589f72	793		    NEXT;

0x0000000000589f75	793		    NEXT;

0x0000000000589f78	793		    NEXT;

0x0000000000589f80	793		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1854		    v1 = POP;

0x000000000058be4e	1854		    v1 = POP;

0x000000000058be51	1854		    v1 = POP;

1855		    TOP = Fmember (TOP, v1);

1854		    v1 = POP;

1855		    TOP = Fmember (TOP, v1);

0x000000000058be60	1855		    TOP = Fmember (TOP, v1);

0x000000000058be63	1855		    TOP = Fmember (TOP, v1);

0x000000000058be68	1855		    TOP = Fmember (TOP, v1);

1857		    NEXT;

0x000000000058be70	1857		    NEXT;

0x000000000058be74	1857		    NEXT;

0x000000000058be78	1857		    NEXT;

0x000000000058be7b	1857		    NEXT;

0x000000000058be7e	1857		    NEXT;

0x000000000058be86	1857		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1872		  TOP = Fnreverse (TOP);

0x000000000058bed0	1872		  TOP = Fnreverse (TOP);

0x000000000058bed3	1872		  TOP = Fnreverse (TOP);

0x000000000058bed6	1872		  TOP = Fnreverse (TOP);

0x000000000058bedb	1872		  TOP = Fnreverse (TOP);

1874		  NEXT;

0x000000000058bee2	1874		  NEXT;

0x000000000058bee6	1874		  NEXT;

0x000000000058beea	1874		  NEXT;

0x000000000058beed	1874		  NEXT;

0x000000000058bef0	1874		  NEXT;

0x000000000058bef8	1874		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffd268) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd268) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199567) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199567) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd268) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd268) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199567) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199567) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd268) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199567) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd268)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0.5, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd268) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd268) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd268) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=500000) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2680) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2680) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=500000, f=12199559) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a082	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6c9	1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6cc	1515		  TOP = Ftimes (2, &TOP);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffd270) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd270) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199551) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199551) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffd270) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd270) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199551) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199551) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd270) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199551) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd270)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd270) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd270) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffd270) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=0) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2670) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2670) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=0, f=12199543) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a087	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e6e	927		  goto dounbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589bfb	744		    NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

0x000000000058ad91	1253		  TOP = Flist (4, &TOP);

0x000000000058ad94	1253		  TOP = Flist (4, &TOP);

0x000000000058ad99	1253		  TOP = Flist (4, &TOP);

1254		  NEXT;

0x000000000058ada0	1254		  NEXT;

0x000000000058ada4	1254		  NEXT;

0x000000000058ada8	1254		  NEXT;

0x000000000058adab	1254		  NEXT;

0x000000000058adae	1254		  NEXT;

0x000000000058adb6	1254		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd420) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd420) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd420) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=27, value=19614054) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=27, value=19614054) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=27, value=19614054) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd418) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd418) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e6e	927		  goto dounbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1282		    v2 = POP; v1 = POP;

0x000000000058ae42	1282		    v2 = POP; v1 = POP;

0x000000000058ae45	1282		    v2 = POP; v1 = POP;

1283		    TOP = Faset (TOP, v1, v2);

1282		    v2 = POP; v1 = POP;

1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae55	1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae58	1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae5b	1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae60	1283		    TOP = Faset (TOP, v1, v2);

1285		    NEXT;

0x000000000058ae68	1285		    NEXT;

0x000000000058ae6c	1285		    NEXT;

0x000000000058ae70	1285		    NEXT;

0x000000000058ae73	1285		    NEXT;

0x000000000058ae76	1285		    NEXT;

0x000000000058ae7e	1285		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9983485, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd5d0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9983485, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd5d0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9983485, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd5d0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=22, value=18334533) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=22, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=22, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=22, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=22, value=18334533) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd5c8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd5c8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989661, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd7b0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989661, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd7b0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989661, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd7b0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=16, value=18334533) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=18334533) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=16, value=18334533) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd7a8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd7a8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b08	1962		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9826893, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9826805, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd950) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9826805, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd950) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9826805, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd950) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=13, value=12223714) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=13, value=12223714) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=13, value=12223714) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd948) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd948) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=8801501, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=8801501, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=8801421, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffdaf0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=8801421, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffdaf0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=8801421, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffdaf0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=10, value=12223714) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=10, value=12223714) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=10, value=12223714) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=10, value=12223714) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdae8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdae8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=8802781, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=8802781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=8802701, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffdc98) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=8802701, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffdc98) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=8802701, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffdc98) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=8, value=12223714) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=8, value=12223714) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=8, value=12223714) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=nargs@entry=2, args=args@entry=0x7fffffffdc90) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=nargs@entry=2, args=args@entry=0x7fffffffdc90) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

call1 (fn=fn@entry=15785170, arg1=<optimized out>) at eval.c:2611
2611	}

0x0000000000555ffe	2611	}

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2330
2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=16579702) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

XTYPE (a=16579702) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000055ce4a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce50	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2329		  dummy = call1 (fn, XCAR (tail));

XUNTAG (type=6, a=16579702) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2329
2329		  dummy = call1 (fn, XCAR (tail));

0x000000000055ce5d	2329		  dummy = call1 (fn, XCAR (tail));

2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=16963990) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

XTYPE (a=16963990) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000055ce4a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce50	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2329		  dummy = call1 (fn, XCAR (tail));

XUNTAG (type=6, a=16963990) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2329
2329		  dummy = call1 (fn, XCAR (tail));

0x000000000055ce5d	2329		  dummy = call1 (fn, XCAR (tail));

2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=19565366) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

XTYPE (a=19565366) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000055ce4a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce50	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2329		  dummy = call1 (fn, XCAR (tail));

XUNTAG (type=6, a=19565366) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2329
2329		  dummy = call1 (fn, XCAR (tail));

0x000000000055ce5d	2329		  dummy = call1 (fn, XCAR (tail));

2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=19341174) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

XTYPE (a=19341174) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000055ce4a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce50	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2329		  dummy = call1 (fn, XCAR (tail));

XUNTAG (type=6, a=19341174) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2329
2329		  dummy = call1 (fn, XCAR (tail));

0x000000000055ce5d	2329		  dummy = call1 (fn, XCAR (tail));

2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=17130758) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

XTYPE (a=17130758) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000055ce4a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce50	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2329		  dummy = call1 (fn, XCAR (tail));

XUNTAG (type=6, a=17130758) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2329
2329		  dummy = call1 (fn, XCAR (tail));

0x000000000055ce5d	2329		  dummy = call1 (fn, XCAR (tail));

2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=17100678) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

XTYPE (a=17100678) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000055ce4a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce50	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2329		  dummy = call1 (fn, XCAR (tail));

XUNTAG (type=6, a=17100678) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2329
2329		  dummy = call1 (fn, XCAR (tail));

0x000000000055ce5d	2329		  dummy = call1 (fn, XCAR (tail));

2330		  if (vals)

0x000000000055ce65	2330		  if (vals)

2327	      for (i = 0; i < leni && CONSP (tail); i++)

XCDR (c=12223666) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

mapcar1 (leni=17, vals=vals@entry=0x0, fn=fn@entry=15785170, seq=seq@entry=15995766) at fns.c:2327
2327	      for (i = 0; i < leni && CONSP (tail); i++)

0x000000000055ce77	2327	      for (i = 0; i < leni && CONSP (tail); i++)

2337	}

0x000000000055ce7d	2337	}

0x000000000055ce7e	2337	}

0x000000000055ce7f	2337	}

0x000000000055ce81	2337	}

0x000000000055ce83	2337	}

0x000000000055ce85	2337	}

0x000000000055ce87	2337	}

Fmapc (function=15785170, sequence=15995766) at fns.c:2421
2421	}

0x000000000055e616	2421	}

0x000000000055e619	2421	}

0x000000000055e61a	2421	}

0x000000000055e61b	2421	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdd88) at eval.c:2816
2816		      break;

2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdd88) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1864		    v1 = POP;

0x000000000058be8f	1864		    v1 = POP;

0x000000000058be92	1864		    v1 = POP;

1865		    TOP = Fassq (TOP, v1);

1864		    v1 = POP;

1865		    TOP = Fassq (TOP, v1);

0x000000000058bea1	1865		    TOP = Fassq (TOP, v1);

0x000000000058bea4	1865		    TOP = Fassq (TOP, v1);

0x000000000058bea9	1865		    TOP = Fassq (TOP, v1);

1867		    NEXT;

0x000000000058beb1	1867		    NEXT;

0x000000000058beb5	1867		    NEXT;

0x000000000058beb9	1867		    NEXT;

0x000000000058bebc	1867		    NEXT;

0x000000000058bebf	1867		    NEXT;

0x000000000058bec7	1867		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a79e	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a7a5	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a7b9	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:987
987		  op = FETCH2;

0x000000000058a7d7	987		  op = FETCH2;

0x000000000058a7db	987		  op = FETCH2;

0x000000000058a7df	987		  op = FETCH2;

0x000000000058a7e3	987		  op = FETCH2;

0x000000000058a7e7	987		  op = FETCH2;

0x000000000058a7eb	987		  op = FETCH2;

988		  if (!NILP (TOP))

0x000000000058a7f3	988		  if (!NILP (TOP))

0x000000000058a7f6	988		  if (!NILP (TOP))

994		  else DISCARD (1);

0x000000000058c722	994		  else DISCARD (1);

995		  NEXT;

0x000000000058a83a	995		  NEXT;

0x000000000058a83e	995		  NEXT;

0x000000000058a841	995		  NEXT;

0x000000000058a844	995		  NEXT;

0x000000000058a84c	995		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1864		    v1 = POP;

0x000000000058be8f	1864		    v1 = POP;

0x000000000058be92	1864		    v1 = POP;

1865		    TOP = Fassq (TOP, v1);

1864		    v1 = POP;

1865		    TOP = Fassq (TOP, v1);

0x000000000058bea1	1865		    TOP = Fassq (TOP, v1);

0x000000000058bea4	1865		    TOP = Fassq (TOP, v1);

0x000000000058bea9	1865		    TOP = Fassq (TOP, v1);

1867		    NEXT;

0x000000000058beb1	1867		    NEXT;

0x000000000058beb5	1867		    NEXT;

0x000000000058beb9	1867		    NEXT;

0x000000000058bebc	1867		    NEXT;

0x000000000058bebf	1867		    NEXT;

0x000000000058bec7	1867		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

978		      BYTE_CODE_QUIT;

0x000000000058c7b0	978		      BYTE_CODE_QUIT;

0x000000000058c7b3	978		      BYTE_CODE_QUIT;

0x000000000058c7c2	978		      BYTE_CODE_QUIT;

0x000000000058c7c9	978		      BYTE_CODE_QUIT;

0x000000000058c7cb	978		      BYTE_CODE_QUIT;

975		  op = FETCH2;

0x000000000058c7d0	975		  op = FETCH2;

0x000000000058c7d3	975		  op = FETCH2;

980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7d9	980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7dd	980		      stack.pc = stack.byte_string_start + op;

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

790		    v1 = POP;

0x0000000000589f48	790		    v1 = POP;

0x0000000000589f4b	790		    v1 = POP;

791		    TOP = Fmemq (TOP, v1);

790		    v1 = POP;

791		    TOP = Fmemq (TOP, v1);

0x0000000000589f5a	791		    TOP = Fmemq (TOP, v1);

0x0000000000589f5d	791		    TOP = Fmemq (TOP, v1);

0x0000000000589f62	791		    TOP = Fmemq (TOP, v1);

793		    NEXT;

0x0000000000589f6a	793		    NEXT;

0x0000000000589f6e	793		    NEXT;

0x0000000000589f72	793		    NEXT;

0x0000000000589f75	793		    NEXT;

0x0000000000589f78	793		    NEXT;

0x0000000000589f80	793		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda8) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda8) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1342		  DISCARD (1);

1343		  TOP = Fconcat (2, &TOP);

1342		  DISCARD (1);

1343		  TOP = Fconcat (2, &TOP);

0x000000000058b13f	1343		  TOP = Fconcat (2, &TOP);

0x000000000058b142	1343		  TOP = Fconcat (2, &TOP);

0x000000000058b147	1343		  TOP = Fconcat (2, &TOP);

1345		  NEXT;

0x000000000058b14e	1345		  NEXT;

0x000000000058b152	1345		  NEXT;

0x000000000058b156	1345		  NEXT;

0x000000000058b159	1345		  NEXT;

0x000000000058b15c	1345		  NEXT;

0x000000000058b164	1345		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf4c	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf50	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf54	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf58	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf5b	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf5e	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf62	1966		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bf65	1966		    Lisp_Object *ptr = top - (FETCH);

1967		    PUSH (*ptr);

0x000000000058bf6b	1967		    PUSH (*ptr);

0x000000000058bf6e	1967		    PUSH (*ptr);

0x000000000058bf72	1967		    PUSH (*ptr);

0x000000000058bf76	1967		    PUSH (*ptr);

1968		    NEXT;

0x000000000058bf7d	1968		    NEXT;

0x000000000058bf81	1968		    NEXT;

0x000000000058bf85	1968		    NEXT;

0x000000000058bf88	1968		    NEXT;

0x000000000058bf90	1968		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1241		    v1 = POP;

0x000000000058ad08	1241		    v1 = POP;

0x000000000058ad0b	1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

0x000000000058ad1a	1242		    TOP = list2 (TOP, v1);

0x000000000058ad1d	1242		    TOP = list2 (TOP, v1);

0x000000000058ad22	1242		    TOP = list2 (TOP, v1);

1243		    NEXT;

0x000000000058ad2a	1243		    NEXT;

0x000000000058ad2e	1243		    NEXT;

0x000000000058ad32	1243		    NEXT;

0x000000000058ad35	1243		    NEXT;

0x000000000058ad38	1243		    NEXT;

0x000000000058ad40	1243		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1247		  DISCARD (2);

1248		  TOP = Flist (3, &TOP);

1247		  DISCARD (2);

1248		  TOP = Flist (3, &TOP);

0x000000000058ad56	1248		  TOP = Flist (3, &TOP);

0x000000000058ad59	1248		  TOP = Flist (3, &TOP);

0x000000000058ad5e	1248		  TOP = Flist (3, &TOP);

1249		  NEXT;

0x000000000058ad65	1249		  NEXT;

0x000000000058ad69	1249		  NEXT;

0x000000000058ad6d	1249		  NEXT;

0x000000000058ad70	1249		  NEXT;

0x000000000058ad73	1249		  NEXT;

0x000000000058ad7b	1249		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1241		    v1 = POP;

0x000000000058ad08	1241		    v1 = POP;

0x000000000058ad0b	1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

0x000000000058ad1a	1242		    TOP = list2 (TOP, v1);

0x000000000058ad1d	1242		    TOP = list2 (TOP, v1);

0x000000000058ad22	1242		    TOP = list2 (TOP, v1);

1243		    NEXT;

0x000000000058ad2a	1243		    NEXT;

0x000000000058ad2e	1243		    NEXT;

0x000000000058ad32	1243		    NEXT;

0x000000000058ad35	1243		    NEXT;

0x000000000058ad38	1243		    NEXT;

0x000000000058ad40	1243		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1235		  TOP = list1 (TOP);

0x000000000058acd7	1235		  TOP = list1 (TOP);

0x000000000058acda	1235		  TOP = list1 (TOP);

0x000000000058acdd	1235		  TOP = list1 (TOP);

0x000000000058ace2	1235		  TOP = list1 (TOP);

1236		  NEXT;

0x000000000058ace9	1236		  NEXT;

0x000000000058aced	1236		  NEXT;

0x000000000058acf1	1236		  NEXT;

0x000000000058acf4	1236		  NEXT;

0x000000000058acf7	1236		  NEXT;

0x000000000058acff	1236		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1159		    handlers = POP;

0x000000000058a3bd	1159		    handlers = POP;

1160		    body = POP;

1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

1160		    body = POP;

1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3d0	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3d3	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3d6	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3db	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

1164		    NEXT;

0x000000000058a3e3	1164		    NEXT;

0x000000000058a3e7	1164		    NEXT;

0x000000000058a3eb	1164		    NEXT;

0x000000000058a3ee	1164		    NEXT;

0x000000000058a3f1	1164		    NEXT;

0x000000000058a3f9	1164		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

record_unwind_current_buffer () at buffer.h:1111
1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cec	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cf1	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cf6	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cf9	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:1073
1073		  NEXT;

0x0000000000589d02	1073		  NEXT;

0x0000000000589d06	1073		  NEXT;

0x0000000000589d0a	1073		  NEXT;

0x0000000000589d0d	1073		  NEXT;

0x0000000000589d10	1073		  NEXT;

0x0000000000589d18	1073		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1644		  TOP = Fset_buffer (TOP);

0x000000000058b8d5	1644		  TOP = Fset_buffer (TOP);

0x000000000058b8d8	1644		  TOP = Fset_buffer (TOP);

0x000000000058b8db	1644		  TOP = Fset_buffer (TOP);

0x000000000058b8e0	1644		  TOP = Fset_buffer (TOP);

1646		  NEXT;

0x000000000058b8e7	1646		  NEXT;

0x000000000058b8eb	1646		  NEXT;

0x000000000058b8ef	1646		  NEXT;

0x000000000058b8f2	1646		  NEXT;

0x000000000058b8f5	1646		  NEXT;

0x000000000058b8fd	1646		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589ac6	2014		  NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc8) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddc0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1806		    v1 = POP;

0x000000000058bd76	1806		    v1 = POP;

0x000000000058bd79	1806		    v1 = POP;

1807		    TOP = Fequal (TOP, v1);

1806		    v1 = POP;

1807		    TOP = Fequal (TOP, v1);

0x000000000058bd88	1807		    TOP = Fequal (TOP, v1);

0x000000000058bd8b	1807		    TOP = Fequal (TOP, v1);

0x000000000058bd90	1807		    TOP = Fequal (TOP, v1);

1808		    NEXT;

0x000000000058bd98	1808		    NEXT;

0x000000000058bd9c	1808		    NEXT;

0x000000000058bda0	1808		    NEXT;

0x000000000058bda3	1808		    NEXT;

0x000000000058bda6	1808		    NEXT;

0x000000000058bdae	1808		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a79e	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a7a5	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a7b9	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:987
987		  op = FETCH2;

0x000000000058a7d7	987		  op = FETCH2;

0x000000000058a7db	987		  op = FETCH2;

0x000000000058a7df	987		  op = FETCH2;

0x000000000058a7e3	987		  op = FETCH2;

0x000000000058a7e7	987		  op = FETCH2;

0x000000000058a7eb	987		  op = FETCH2;

988		  if (!NILP (TOP))

0x000000000058a7f3	988		  if (!NILP (TOP))

0x000000000058a7f6	988		  if (!NILP (TOP))

994		  else DISCARD (1);

0x000000000058c722	994		  else DISCARD (1);

995		  NEXT;

0x000000000058a83a	995		  NEXT;

0x000000000058a83e	995		  NEXT;

0x000000000058a841	995		  NEXT;

0x000000000058a844	995		  NEXT;

0x000000000058a84c	995		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a79e	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a7a5	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a7b9	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda8) at bytecode.c:987
987		  op = FETCH2;

0x000000000058a7d7	987		  op = FETCH2;

0x000000000058a7db	987		  op = FETCH2;

0x000000000058a7df	987		  op = FETCH2;

0x000000000058a7e3	987		  op = FETCH2;

0x000000000058a7e7	987		  op = FETCH2;

0x000000000058a7eb	987		  op = FETCH2;

988		  if (!NILP (TOP))

0x000000000058a7f3	988		  if (!NILP (TOP))

0x000000000058a7f6	988		  if (!NILP (TOP))

994		  else DISCARD (1);

0x000000000058c722	994		  else DISCARD (1);

995		  NEXT;

0x000000000058a83a	995		  NEXT;

0x000000000058a83e	995		  NEXT;

0x000000000058a841	995		  NEXT;

0x000000000058a844	995		  NEXT;

0x000000000058a84c	995		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1349		  DISCARD (2);

1350		  TOP = Fconcat (3, &TOP);

1349		  DISCARD (2);

1350		  TOP = Fconcat (3, &TOP);

0x000000000058b077	1350		  TOP = Fconcat (3, &TOP);

0x000000000058b07a	1350		  TOP = Fconcat (3, &TOP);

0x000000000058b07f	1350		  TOP = Fconcat (3, &TOP);

1352		  NEXT;

0x000000000058b086	1352		  NEXT;

0x000000000058b08a	1352		  NEXT;

0x000000000058b08e	1352		  NEXT;

0x000000000058b091	1352		  NEXT;

0x000000000058b094	1352		  NEXT;

0x000000000058b09c	1352		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1241		    v1 = POP;

0x000000000058ad08	1241		    v1 = POP;

0x000000000058ad0b	1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

0x000000000058ad1a	1242		    TOP = list2 (TOP, v1);

0x000000000058ad1d	1242		    TOP = list2 (TOP, v1);

0x000000000058ad22	1242		    TOP = list2 (TOP, v1);

1243		    NEXT;

0x000000000058ad2a	1243		    NEXT;

0x000000000058ad2e	1243		    NEXT;

0x000000000058ad32	1243		    NEXT;

0x000000000058ad35	1243		    NEXT;

0x000000000058ad38	1243		    NEXT;

0x000000000058ad40	1243		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1096		    v1 = POP;

1097		    TOP = internal_catch (TOP, eval_sub, v1);

1096		    v1 = POP;

0x000000000058a2a0	1096		    v1 = POP;

1097		    TOP = internal_catch (TOP, eval_sub, v1);

1096		    v1 = POP;

1097		    TOP = internal_catch (TOP, eval_sub, v1);

0x000000000058a2af	1097		    TOP = internal_catch (TOP, eval_sub, v1);

0x000000000058a2b2	1097		    TOP = internal_catch (TOP, eval_sub, v1);

0x000000000058a2b7	1097		    TOP = internal_catch (TOP, eval_sub, v1);

1099		    NEXT;

0x000000000058a2bf	1099		    NEXT;

0x000000000058a2c3	1099		    NEXT;

0x000000000058a2c7	1099		    NEXT;

0x000000000058a2ca	1099		    NEXT;

0x000000000058a2cd	1099		    NEXT;

0x000000000058a2d5	1099		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fcb	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

record_unwind_current_buffer () at buffer.h:1111
1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cec	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cf1	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cf6	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

0x0000000000589cf9	1111	  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:1073
1073		  NEXT;

0x0000000000589d02	1073		  NEXT;

0x0000000000589d06	1073		  NEXT;

0x0000000000589d0a	1073		  NEXT;

0x0000000000589d0d	1073		  NEXT;

0x0000000000589d10	1073		  NEXT;

0x0000000000589d18	1073		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1644		  TOP = Fset_buffer (TOP);

0x000000000058b8d5	1644		  TOP = Fset_buffer (TOP);

0x000000000058b8d8	1644		  TOP = Fset_buffer (TOP);

0x000000000058b8db	1644		  TOP = Fset_buffer (TOP);

0x000000000058b8e0	1644		  TOP = Fset_buffer (TOP);

1646		  NEXT;

0x000000000058b8e7	1646		  NEXT;

0x000000000058b8eb	1646		  NEXT;

0x000000000058b8ef	1646		  NEXT;

0x000000000058b8f2	1646		  NEXT;

0x000000000058b8f5	1646		  NEXT;

0x000000000058b8fd	1646		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffc688) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc688) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199527) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199527) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc688) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc688) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199527) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199527) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc688) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199527) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc688)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0.5, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc688) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc688) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc688) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=500000) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2658) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2658) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=500000, f=12199519) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a082	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6c9	1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6cc	1515		  TOP = Ftimes (2, &TOP);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffc690) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc690) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199511) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199511) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc690) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc690) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199511) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199511) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc690) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199511) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc690)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc690) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc690) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc690) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=0) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2648) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2648) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=0, f=12199503) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a087	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e6e	927		  goto dounbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589bfb	744		    NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

0x000000000058ad91	1253		  TOP = Flist (4, &TOP);

0x000000000058ad94	1253		  TOP = Flist (4, &TOP);

0x000000000058ad99	1253		  TOP = Flist (4, &TOP);

1254		  NEXT;

0x000000000058ada0	1254		  NEXT;

0x000000000058ada4	1254		  NEXT;

0x000000000058ada8	1254		  NEXT;

0x000000000058adab	1254		  NEXT;

0x000000000058adae	1254		  NEXT;

0x000000000058adb6	1254		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffc860) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffc860) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffc860) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=40, value=19660998) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=40, value=19660998) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=40, value=19660998) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffc858) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffc858) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e6e	927		  goto dounbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1282		    v2 = POP; v1 = POP;

0x000000000058ae42	1282		    v2 = POP; v1 = POP;

0x000000000058ae45	1282		    v2 = POP; v1 = POP;

1283		    TOP = Faset (TOP, v1, v2);

1282		    v2 = POP; v1 = POP;

1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae55	1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae58	1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae5b	1283		    TOP = Faset (TOP, v1, v2);

0x000000000058ae60	1283		    TOP = Faset (TOP, v1, v2);

1285		    NEXT;

0x000000000058ae68	1285		    NEXT;

0x000000000058ae6c	1285		    NEXT;

0x000000000058ae70	1285		    NEXT;

0x000000000058ae73	1285		    NEXT;

0x000000000058ae76	1285		    NEXT;

0x000000000058ae7e	1285		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9983629, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9983485, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffc9f0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9983485, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffc9f0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9983485, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffc9f0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=35, value=18351021) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=35, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=35, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=35, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=35, value=18351021) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffc9e8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffc9e8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989749, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989661, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffcbd8) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989661, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffcbd8) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989661, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffcbd8) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=29, value=18351021) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=29, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=29, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=29, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=29, value=18351021) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=29, value=18351021) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcbd0) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcbd0) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=1, args=<optimized out>, args@entry=0x7fffffffcbd0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffcbd0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffcbc8) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a79e	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a7a5	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a7b9	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffcbd0) at bytecode.c:987
987		  op = FETCH2;

0x000000000058a7d7	987		  op = FETCH2;

0x000000000058a7db	987		  op = FETCH2;

0x000000000058a7df	987		  op = FETCH2;

0x000000000058a7e3	987		  op = FETCH2;

0x000000000058a7e7	987		  op = FETCH2;

0x000000000058a7eb	987		  op = FETCH2;

988		  if (!NILP (TOP))

0x000000000058a7f3	988		  if (!NILP (TOP))

0x000000000058a7f6	988		  if (!NILP (TOP))

994		  else DISCARD (1);

0x000000000058c722	994		  else DISCARD (1);

995		  NEXT;

0x000000000058a83a	995		  NEXT;

0x000000000058a83e	995		  NEXT;

0x000000000058a841	995		  NEXT;

0x000000000058a844	995		  NEXT;

0x000000000058a84c	995		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1567		    XSETFASTINT (v1, ZV);

1568		    PUSH (v1);

0x000000000058b656	1568		    PUSH (v1);

make_number (n=<optimized out>) at lisp.h:700
700	LISP_MACRO_DEFUN (make_number, Lisp_Object, (EMACS_INT n), (n))

0x000000000058b661	700	LISP_MACRO_DEFUN (make_number, Lisp_Object, (EMACS_INT n), (n))

exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffcbd0) at bytecode.c:1568
1568		    PUSH (v1);

1569		    NEXT;

0x000000000058b66c	1569		    NEXT;

0x000000000058b670	1569		    NEXT;

0x000000000058b674	1569		    NEXT;

0x000000000058b677	1569		    NEXT;

0x000000000058b67a	1569		    NEXT;

0x000000000058b682	1569		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffcbd0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589c47	880		  NEXT;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9939349, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffcbd0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcd58) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcd58) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9940949, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=2, args=<optimized out>, args@entry=0x7fffffffcd58) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9940949, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=2, 
    args=<optimized out>, args@entry=0x7fffffffcd58) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffce88) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffce88) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9918861, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589c47	880		  NEXT;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9918861, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9918861, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9918861, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9918861, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9918861, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9918789, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd050) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9918789, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd050) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9918789, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd050) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=25, value=19661366) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=25, value=19661366) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd048) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd048) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9916357, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9916357, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1223		  TOP = NILP (TOP) ? Qt : Qnil;

NILP (x=12223714) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

exec_byte_code (bytestr=<optimized out>, vector=9916357, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:1223
1223		  TOP = NILP (TOP) ? Qt : Qnil;

0x000000000058ae91	1223		  TOP = NILP (TOP) ? Qt : Qnil;

0x000000000058ae99	1223		  TOP = NILP (TOP) ? Qt : Qnil;

1224		  NEXT;

0x000000000058aea0	1224		  NEXT;

0x000000000058aea4	1224		  NEXT;

0x000000000058aea8	1224		  NEXT;

0x000000000058aeab	1224		  NEXT;

0x000000000058aeae	1224		  NEXT;

0x000000000058aeb6	1224		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9916357, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

978		      BYTE_CODE_QUIT;

0x000000000058c7b0	978		      BYTE_CODE_QUIT;

0x000000000058c7b3	978		      BYTE_CODE_QUIT;

0x000000000058c7c2	978		      BYTE_CODE_QUIT;

0x000000000058c7c9	978		      BYTE_CODE_QUIT;

0x000000000058c7cb	978		      BYTE_CODE_QUIT;

975		  op = FETCH2;

0x000000000058c7d0	975		  op = FETCH2;

0x000000000058c7d3	975		  op = FETCH2;

980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7d9	980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7dd	980		      stack.pc = stack.byte_string_start + op;

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9916357, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9916285, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd210) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9916285, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd210) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9916285, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd210) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=23, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=23, value=12223666) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=23, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd208) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd208) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9891813, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9891813, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891741, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd3b0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891741, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd3b0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891741, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd3b0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=21, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=21, value=12223666) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=21, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd3a8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd3a8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589c47	880		  NEXT;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9891101, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891013, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd570) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891013, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd570) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891013, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd570) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=18, value=12223714) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=18, value=12223714) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=18, value=12223714) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd568) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd568) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9892021, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9892021, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891941, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd6f0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891941, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd6f0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9891941, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd6f0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=17, value=12223714) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=17, value=12223714) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd6e8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd6e8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9892701, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9892701, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9892701, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9892701, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9892701, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9892629, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd890) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9892629, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd890) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9892629, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd890) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=15, value=12223714) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=15, value=12223714) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd888) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd888) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b08	1962		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=19631654) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fd0	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e69	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9893781, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9893709, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffda78) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9893709, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffda78) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9893709, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffda78) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=11, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=11, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=<optimized out>) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=<optimized out>) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

funcall_nil (nargs=<optimized out>, args=<optimized out>) at eval.c:2364
2364	}

0x0000000000555f50	2364	}

0x0000000000555f54	2364	}

0x000000000055469d in run_hook_with_args (nargs=1, args=0x7fffffffda70, funcall=0x555f40 <funcall_nil>) at eval.c:2547
2547		      ret = funcall (nargs, args);

XCDR (c=12223666) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x00000000005546a6	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

run_hook_with_args (nargs=1, args=0x7fffffffda70, funcall=0x555f40 <funcall_nil>) at eval.c:2514
2514	      for (;

0x00000000005546ac	2514	      for (;

2554	}

0x0000000000554757	2554	}

0x000000000055475a	2554	}

0x000000000055475b	2554	}

0x000000000055475c	2554	}

0x000000000055475e	2554	}

0x0000000000554760	2554	}

0x0000000000554762	2554	}

0x0000000000554764	2554	}

Frun_hooks (nargs=1, args=0x7fffffffdb18) at eval.c:2386
2386	  for (i = 0; i < nargs; i++)

0x00000000005547c9	2386	  for (i = 0; i < nargs; i++)

2392	  return Qnil;

2393	}

0x00000000005547d6	2393	}

0x00000000005547d7	2393	}

0x00000000005547d8	2393	}

0x00000000005547da	2393	}

0x0000000000555ddc in Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdb10) at eval.c:2792
2792		val = (XSUBR (fun)->function.aMANY) (numargs, args + 1);

2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdb10) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=8748909, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=1, args=<optimized out>, args@entry=0x7fffffffdb10) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=8748909, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=1, 
    args=<optimized out>, args@entry=0x7fffffffdb10) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdc48) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdc48) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=10165245, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x7fffffffdc48) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=10165245, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdc48) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdd88) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdd88) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1241		    v1 = POP;

0x000000000058ad08	1241		    v1 = POP;

0x000000000058ad0b	1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

1241		    v1 = POP;

1242		    TOP = list2 (TOP, v1);

0x000000000058ad1a	1242		    TOP = list2 (TOP, v1);

0x000000000058ad1d	1242		    TOP = list2 (TOP, v1);

0x000000000058ad22	1242		    TOP = list2 (TOP, v1);

1243		    NEXT;

0x000000000058ad2a	1243		    NEXT;

0x000000000058ad2e	1243		    NEXT;

0x000000000058ad32	1243		    NEXT;

0x000000000058ad35	1243		    NEXT;

0x000000000058ad38	1243		    NEXT;

0x000000000058ad40	1243		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16051478) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16021094) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16021094) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16021110) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16021110) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16021606) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16021606) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16021958) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16021958) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16021974) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16021974) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16021990) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16021990) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022006) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022006) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022118) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022118) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022214) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022214) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022262) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022262) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022326) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022326) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022342) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022342) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022358) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022358) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022374) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022374) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022438) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022438) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022534) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022534) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022598) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022598) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022630) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022630) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022646) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022646) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022662) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022662) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022694) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022694) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022774) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022774) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022918) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022918) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022934) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022934) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022950) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022950) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

765		    v1 = TOP;

0x0000000000589ebf	765		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ec4	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:766
766		    if (CONSP (v1))

0x0000000000589eca	766		    if (CONSP (v1))

XCAR (c=16022966) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:767
767		      TOP = XCAR (v1);

0x000000000058c53f	767		      TOP = XCAR (v1);

0x000000000058c542	767		      TOP = XCAR (v1);

775		    NEXT;

0x0000000000589ee1	775		    NEXT;

0x0000000000589ee5	775		    NEXT;

0x0000000000589ee9	775		    NEXT;

0x0000000000589eec	775		    NEXT;

0x0000000000589eef	775		    NEXT;

0x0000000000589ef7	775		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf43	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d6e	1948	         call3 (intern ("error"),

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffddb8) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

799		    v1 = TOP;

0x0000000000589f89	799		    v1 = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589f8e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:800
800		    if (CONSP (v1))

0x0000000000589f94	800		    if (CONSP (v1))

XCDR (c=16022966) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdda0) at bytecode.c:801
801		      TOP = XCDR (v1);

0x000000000058c4d4	801		      TOP = XCDR (v1);

0x000000000058c4d7	801		      TOP = XCDR (v1);

809		    NEXT;

0x0000000000589fab	809		    NEXT;

0x0000000000589faf	809		    NEXT;

0x0000000000589fb3	809		    NEXT;

0x0000000000589fb6	809		    NEXT;

0x0000000000589fb9	809		    NEXT;

0x0000000000589fc1	809		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1994		      top[-op] = TOP;

1993		      op &= 0x7F;

1994		      top[-op] = TOP;

0x000000000058c562	1994		      top[-op] = TOP;

0x000000000058c564	1994		      top[-op] = TOP;

0x000000000058c567	1994		      top[-op] = TOP;

0x000000000058c56a	1994		      top[-op] = TOP;

0x000000000058c56e	1994		      top[-op] = TOP;

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd98) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1990		  op = FETCH;

0x000000000058c0a6	1990		  op = FETCH;

0x000000000058c0aa	1990		  op = FETCH;

0x000000000058c0ae	1990		  op = FETCH;

1991		  if (op & 0x80)

0x000000000058c0b3	1991		  if (op & 0x80)

1996		  DISCARD (op);

0x000000000058c0bb	1996		  DISCARD (op);

0x000000000058c0bf	1996		  DISCARD (op);

1997		  NEXT;

0x000000000058c0c7	1997		  NEXT;

0x000000000058c0cb	1997		  NEXT;

0x000000000058c0cf	1997		  NEXT;

0x000000000058c0d2	1997		  NEXT;

0x000000000058c0da	1997		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd90) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

982		  else DISCARD (1);

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd80) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

978		      BYTE_CODE_QUIT;

0x000000000058c7b0	978		      BYTE_CODE_QUIT;

0x000000000058c7b3	978		      BYTE_CODE_QUIT;

0x000000000058c7c2	978		      BYTE_CODE_QUIT;

0x000000000058c7c9	978		      BYTE_CODE_QUIT;

0x000000000058c7cb	978		      BYTE_CODE_QUIT;

975		  op = FETCH2;

0x000000000058c7d0	975		  op = FETCH2;

0x000000000058c7d3	975		  op = FETCH2;

980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7d9	980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7dd	980		      stack.pc = stack.byte_string_start + op;

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9200493, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdd88) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdf30) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffdf30) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x7fffffffdf30) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf28) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf28) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf28) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf30) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf30) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab7f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab83	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab87	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8b	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab8f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab92	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab96	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9a	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9d	1062		  PUSH (vectorp[FETCH2]);

0x000000000058ab9f	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba3	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba5	1062		  PUSH (vectorp[FETCH2]);

0x000000000058aba9	1062		  PUSH (vectorp[FETCH2]);

1063		  NEXT;

0x000000000058abb0	1063		  NEXT;

0x000000000058abb4	1063		  NEXT;

0x000000000058abb8	1063		  NEXT;

0x000000000058abbb	1063		  NEXT;

0x000000000058abc3	1063		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1342		  DISCARD (1);

1343		  TOP = Fconcat (2, &TOP);

1342		  DISCARD (1);

1343		  TOP = Fconcat (2, &TOP);

0x000000000058b13f	1343		  TOP = Fconcat (2, &TOP);

0x000000000058b142	1343		  TOP = Fconcat (2, &TOP);

0x000000000058b147	1343		  TOP = Fconcat (2, &TOP);

1345		  NEXT;

0x000000000058b14e	1345		  NEXT;

0x000000000058b152	1345		  NEXT;

0x000000000058b156	1345		  NEXT;

0x000000000058b159	1345		  NEXT;

0x000000000058b15c	1345		  NEXT;

0x000000000058b164	1345		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bff9	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058bffd	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058c001	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058c005	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058c008	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058c00b	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058c00f	1979		    Lisp_Object *ptr = top - (FETCH);

0x000000000058c012	1979		    Lisp_Object *ptr = top - (FETCH);

1980		    *ptr = POP;

0x000000000058c018	1980		    *ptr = POP;

0x000000000058c01b	1980		    *ptr = POP;

0x000000000058c01f	1980		    *ptr = POP;

0x000000000058c023	1980		    *ptr = POP;

1981		    NEXT;

0x000000000058c02a	1981		    NEXT;

0x000000000058c02e	1981		    NEXT;

0x000000000058c032	1981		    NEXT;

0x000000000058c035	1981		    NEXT;

0x000000000058c03d	1981		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf28) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf30) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

982		  else DISCARD (1);

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058bf3e	1883		    NEXT;

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad4	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

0x0000000000589ad8	1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

1960		    Lisp_Object *ptr = top - (op - Bstack_ref);

1961		    PUSH (*ptr);

0x0000000000589ae6	1961		    PUSH (*ptr);

0x0000000000589ae9	1961		    PUSH (*ptr);

1962		    NEXT;

0x0000000000589af0	1962		    NEXT;

0x0000000000589af4	1962		    NEXT;

0x0000000000589af8	1962		    NEXT;

0x0000000000589afb	1962		    NEXT;

0x0000000000589afe	1962		    NEXT;

0x0000000000589b06	1962		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf38) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

740			v2 = Fsymbol_value (v1);

0x000000000058c25b	740			v2 = Fsymbol_value (v1);

0x000000000058c260	740			v2 = Fsymbol_value (v1);

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9197013, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x7fffffffdf30) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

apply_lambda (fun=9196933, args=<optimized out>, count=3) at eval.c:2922
2922	  if (backtrace_debug_on_exit (specpdl + count))

2919	  tem = funcall_lambda (fun, numargs, arg_vector);

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

apply_lambda (fun=9196933, args=<optimized out>, count=3) at eval.c:2922
2922	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000554d28	2922	  if (backtrace_debug_on_exit (specpdl + count))

2928	  SAFE_FREE ();

0x0000000000554d2e	2928	  SAFE_FREE ();

2930	}

0x0000000000554d4c	2930	}

0x0000000000554d4f	2930	}

0x0000000000554d50	2930	}

0x0000000000554d52	2930	}

0x0000000000554d54	2930	}

0x0000000000554d56	2930	}

0x0000000000554d58	2930	}

0x0000000000554d59	2930	}

0x000000000055507e in eval_sub (form=form@entry=15558518) at eval.c:2256
2256		val = apply_lambda (fun, original_args, count);

2263	  if (backtrace_debug_on_exit (specpdl + count))

2262	  lisp_eval_depth--;

2263	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555096	2263	  if (backtrace_debug_on_exit (specpdl + count))

2265	  specpdl_ptr--;

2267	  return val;

2268	}

0x0000000000554dee	2268	}

0x0000000000554df1	2268	}

0x0000000000554df2	2268	}

0x0000000000554df4	2268	}

0x0000000000554df6	2268	}

0x0000000000554df8	2268	}

0x0000000000554dfa	2268	}

0x0000000000554dfb	2268	}

Feval (form=15558518, lexical=<optimized out>) at eval.c:1997
1997	}

1996	  return unbind_to (count, eval_sub (form));

1997	}

1996	  return unbind_to (count, eval_sub (form));

1997	}

1996	  return unbind_to (count, eval_sub (form));

unbind_to (count=2, value=12471974) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

3331		  Fset_default (specpdl_symbol (specpdl_ptr),

0x0000000000554a97	3331		  Fset_default (specpdl_symbol (specpdl_ptr),

0x0000000000554a9c	3331		  Fset_default (specpdl_symbol (specpdl_ptr),

0x0000000000554aa3	3331		  Fset_default (specpdl_symbol (specpdl_ptr),

0x0000000000554aa6	3331		  Fset_default (specpdl_symbol (specpdl_ptr),

0x0000000000554aad	3331		  Fset_default (specpdl_symbol (specpdl_ptr),

3333		  break;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=<optimized out>, value=12471974) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

internal_condition_case (bfun=bfun@entry=0x4e5270 <top_level_2>, handlers=<optimized out>, hfun=hfun@entry=0x4e9a50 <cmd_error>) at eval.c:1350
1350	  handlerlist = handlerlist->next;

0x000000000055421e	1350	  handlerlist = handlerlist->next;

0x0000000000554222	1350	  handlerlist = handlerlist->next;

1352	}

0x000000000055422d	1352	}

top_level_1 (ignore=ignore@entry=12223666) at keyboard.c:1201
1201	}

0x00000000004e525d	1201	}

0x00000000004e5261	1201	}

internal_catch (tag=12271138, func=func@entry=0x4e51f0 <top_level_1>, arg=12223666) at eval.c:1114
1114	      handlerlist = handlerlist->next;

0x0000000000554102	1114	      handlerlist = handlerlist->next;

0x0000000000554106	1114	      handlerlist = handlerlist->next;

1124	}

0x0000000000554111	1124	}

0x0000000000554112	1124	}

command_loop () at keyboard.c:1157
1157		internal_catch (Qtop_level, command_loop_2, Qnil);

0x00000000004e9636	1157		internal_catch (Qtop_level, command_loop_2, Qnil);

0x00000000004e963b	1157		internal_catch (Qtop_level, command_loop_2, Qnil);

0x00000000004e9642	1157		internal_catch (Qtop_level, command_loop_2, Qnil);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffc808) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc808) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199591) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199591) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc808) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc808) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199591) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199591) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc808) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199591) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc808)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0.5, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc808) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc808) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc808) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=500000) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2688) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2688) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=500000, f=12199567) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a082	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6c9	1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6cc	1515		  TOP = Ftimes (2, &TOP);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffc810) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc810) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199559) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199559) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffc810) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc810) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199559) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199559) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc810) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199559) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc810)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc810) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc810) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffc810) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=0) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2678) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2678) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=0, f=12199551) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a087	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e6e	927		  goto dounbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589bfb	744		    NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

0x000000000058ad91	1253		  TOP = Flist (4, &TOP);

0x000000000058ad94	1253		  TOP = Flist (4, &TOP);

0x000000000058ad99	1253		  TOP = Flist (4, &TOP);

1254		  NEXT;

0x000000000058ada0	1254		  NEXT;

0x000000000058ada4	1254		  NEXT;

0x000000000058ada8	1254		  NEXT;

0x000000000058adab	1254		  NEXT;

0x000000000058adae	1254		  NEXT;

0x000000000058adb6	1254		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffc9b0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffc9b0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffc9b0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=30, value=19566902) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=30, value=19566902) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=30, value=19566902) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffc9a8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffc9a8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a082	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984301, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffcb70) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984301, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffcb70) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984301, nargs=nargs@entry=2, arg_vector=arg_vector@entry=0x7fffffffcb70) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=25, value=19588022) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=25, value=19588022) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=25, value=19588022) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=25, value=19588022) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=25, value=19588022) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=25, value=19588022) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcb68) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcb68) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fcb	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

755			BYTE_CODE_QUIT;

0x000000000058c862	755			BYTE_CODE_QUIT;

0x000000000058c867	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac00	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac03	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac0a	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058ac10	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:1215
1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac16	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac1d	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

0x000000000058ac25	1215		  TOP = STRINGP (TOP) ? Qt : Qnil;

1216		  NEXT;

0x000000000058ac2c	1216		  NEXT;

0x000000000058ac30	1216		  NEXT;

0x000000000058ac34	1216		  NEXT;

0x000000000058ac37	1216		  NEXT;

0x000000000058ac3a	1216		  NEXT;

0x000000000058ac42	1216		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

755			BYTE_CODE_QUIT;

0x000000000058c862	755			BYTE_CODE_QUIT;

0x000000000058c867	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058a534	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058a537	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058a53b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058a53e	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:1211
1211		  TOP = CONSP (TOP) ? Qt : Qnil;

0x000000000058a544	1211		  TOP = CONSP (TOP) ? Qt : Qnil;

0x000000000058a54b	1211		  TOP = CONSP (TOP) ? Qt : Qnil;

0x000000000058a553	1211		  TOP = CONSP (TOP) ? Qt : Qnil;

1212		  NEXT;

0x000000000058a55a	1212		  NEXT;

0x000000000058a55e	1212		  NEXT;

0x000000000058a562	1212		  NEXT;

0x000000000058a565	1212		  NEXT;

0x000000000058a568	1212		  NEXT;

0x000000000058a570	1212		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

883		  op = FETCH;

0x0000000000589e77	883		  op = FETCH;

0x0000000000589e7b	883		  op = FETCH;

0x0000000000589e7f	883		  op = FETCH;

884		  goto docall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988901, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9988765, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffce18) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9988765, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffce18) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9988765, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffce18) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=20, value=18441133) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=20, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=20, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=20, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=20, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=20, value=18441133) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=nargs@entry=4, args=args@entry=0x7fffffffce10) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=nargs@entry=4, args=args@entry=0x7fffffffce10) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x000000000055719c in Fapply (nargs=5, args=0x7fffffffce10) at eval.c:2293
2293	    return Ffuncall (nargs - 1, args);

2355	}

0x00000000005571a3	2355	}

0x00000000005571a6	2355	}

0x00000000005571a7	2355	}

0x00000000005571a9	2355	}

0x00000000005571ab	2355	}

0x00000000005571ad	2355	}

0x00000000005571af	2355	}

0x00000000005571b0	2355	}

0x0000000000555ddc in Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffce08) at eval.c:2792
2792		val = (XSUBR (fun)->function.aMANY) (numargs, args + 1);

2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffce08) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9989365, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9989365, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989261, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffcfd0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989261, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffcfd0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9989261, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffcfd0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=14, value=18441133) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=14, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=14, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=14, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=14, value=18441133) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=14, value=18441133) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcfc8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffcfc8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9825533, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fc6	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9825533, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9825533, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9825453, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd238) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9825453, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd238) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9825453, nargs=nargs@entry=0, arg_vector=arg_vector@entry=0x7fffffffd238) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=13, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=13, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=nargs@entry=1, args=args@entry=0x7fffffffd230) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=nargs@entry=1, args=args@entry=0x7fffffffd230) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x000000000055719c in Fapply (nargs=2, args=0x7fffffffd230) at eval.c:2293
2293	    return Ffuncall (nargs - 1, args);

2355	}

0x00000000005571a3	2355	}

0x00000000005571a6	2355	}

0x00000000005571a7	2355	}

0x00000000005571a9	2355	}

0x00000000005571ab	2355	}

0x00000000005571ad	2355	}

0x00000000005571af	2355	}

0x00000000005571b0	2355	}

0x0000000000555ddc in Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd228) at eval.c:2792
2792		val = (XSUBR (fun)->function.aMANY) (numargs, args + 1);

2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd228) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9988197, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=<optimized out>, args=<optimized out>) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988197, maxdepth=<optimized out>, args_template=<optimized out>, nargs=<optimized out>, 
    args=<optimized out>) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988197, maxdepth=<optimized out>, args_template=<optimized out>, nargs=<optimized out>, 
    args=<optimized out>) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988197, maxdepth=<optimized out>, args_template=<optimized out>, nargs=<optimized out>, 
    args=<optimized out>) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9988197, maxdepth=<optimized out>, args_template=<optimized out>, nargs=<optimized out>, 
    args=<optimized out>) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

0x0000000000555243 in eval_sub (form=form@entry=9988118) at eval.c:2187
2187		      val = (XSUBR (fun)->function.a3

2189		      break;

2263	  if (backtrace_debug_on_exit (specpdl + count))

2262	  lisp_eval_depth--;

2263	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555096	2263	  if (backtrace_debug_on_exit (specpdl + count))

2265	  specpdl_ptr--;

2267	  return val;

2268	}

0x0000000000554dee	2268	}

0x0000000000554df1	2268	}

0x0000000000554df2	2268	}

0x0000000000554df4	2268	}

0x0000000000554df6	2268	}

0x0000000000554df8	2268	}

0x0000000000554dfa	2268	}

0x0000000000554dfb	2268	}

0x0000000000558646 in internal_lisp_condition_case (var=<optimized out>, bodyform=9988118, handlers=<optimized out>) at eval.c:1317
1317	  val = eval_sub (bodyform);

1318	  handlerlist = oldhandlerlist;

0x000000000055864d	1318	  handlerlist = oldhandlerlist;

1320	}

0x0000000000558658	1320	}

0x000000000055865b	1320	}

0x000000000055865c	1320	}

0x000000000055865e	1320	}

0x0000000000558660	1320	}

0x0000000000558662	1320	}

0x0000000000558663	1320	}

0x000000000058a3db in exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1162
1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

1164		    NEXT;

0x000000000058a3e3	1164		    NEXT;

0x000000000058a3e7	1164		    NEXT;

0x000000000058a3eb	1164		    NEXT;

0x000000000058a3ee	1164		    NEXT;

0x000000000058a3f1	1164		    NEXT;

0x000000000058a3f9	1164		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a719	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a720	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a734	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:975
975		  op = FETCH2;

0x000000000058a752	975		  op = FETCH2;

0x000000000058a756	975		  op = FETCH2;

0x000000000058a75a	975		  op = FETCH2;

0x000000000058a75e	975		  op = FETCH2;

0x000000000058a762	975		  op = FETCH2;

0x000000000058a766	975		  op = FETCH2;

976		  if (NILP (TOP))

0x000000000058a76e	976		  if (NILP (TOP))

0x000000000058a771	976		  if (NILP (TOP))

978		      BYTE_CODE_QUIT;

0x000000000058c7b0	978		      BYTE_CODE_QUIT;

0x000000000058c7b3	978		      BYTE_CODE_QUIT;

0x000000000058c7c2	978		      BYTE_CODE_QUIT;

0x000000000058c7c9	978		      BYTE_CODE_QUIT;

0x000000000058c7cb	978		      BYTE_CODE_QUIT;

978		      BYTE_CODE_QUIT;

0x000000000058c848	978		      BYTE_CODE_QUIT;

0x000000000058c84d	978		      BYTE_CODE_QUIT;

975		  op = FETCH2;

0x000000000058c7d0	975		  op = FETCH2;

0x000000000058c7d3	975		  op = FETCH2;

980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7d9	980		      stack.pc = stack.byte_string_start + op;

0x000000000058c7dd	980		      stack.pc = stack.byte_string_start + op;

983		  NEXT;

0x000000000058a780	983		  NEXT;

0x000000000058a784	983		  NEXT;

0x000000000058a787	983		  NEXT;

0x000000000058a78a	983		  NEXT;

0x000000000058a792	983		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a575	1212		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9987805, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd608) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9987805, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd608) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9987805, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd608) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=5, value=12223666) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=5, value=12223666) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=5, value=12223666) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=nargs@entry=2, args=args@entry=0x7fffffffd600) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=nargs@entry=2, args=args@entry=0x7fffffffd600) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

call1 (fn=<optimized out>, arg1=arg1@entry=18334533) at eval.c:2611
2611	}

0x0000000000555ffe	2611	}

timer_check_2 (idle_timers=<optimized out>, timers=<optimized out>) at keyboard.c:4518
4518		      unbind_to (count, Qnil);

0x00000000004ea86b	4518		      unbind_to (count, Qnil);

4516		      Vdeactivate_mark = old_deactivate_mark;

4517		      timers_run++;

4518		      unbind_to (count, Qnil);

0x00000000004ea881	4518		      unbind_to (count, Qnil);

4411	  while (CONSP (pending_funcalls))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x00000000004ea6ec	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=19567478, timers=12223666) at keyboard.c:4411
4411	  while (CONSP (pending_funcalls))

0x00000000004ea6f2	4411	  while (CONSP (pending_funcalls))

4418	  if (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea6f9	4418	  if (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea6ff	4418	  if (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea704	4418	  if (CONSP (timers) || CONSP (idle_timers))

current_timespec () at systime.h:74
74	  gettime (&r);

0x00000000004ea915	74	  gettime (&r);

75	  return r;

0x00000000004ea91f	75	  return r;

timer_check_2 (idle_timers=19567478, timers=12223666) at keyboard.c:4421
4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

current_timespec () at systime.h:75
75	  return r;

0x00000000004ea931	75	  return r;

timer_check_2 (idle_timers=19567478, timers=12223666) at keyboard.c:4421
4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea93c	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea943	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea946	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea949	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea950	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea955	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea95a	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

0x00000000004ea95f	4421	      idleness_now = (timespec_valid_p (timer_idleness_start_time)

4486			      < 0))))

0x00000000004ea70f	4486			      < 0))))

0x00000000004ea714	4486			      < 0))))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x00000000004ea719	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=19567478, timers=12223666) at keyboard.c:4426
4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea71f	4426	  while (CONSP (timers) || CONSP (idle_timers))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x00000000004ea724	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=19567478, timers=12223666) at keyboard.c:4426
4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea72a	4426	  while (CONSP (timers) || CONSP (idle_timers))

4428	      Lisp_Object timer = Qnil, idle_timer = Qnil;

4433	      bool ripe, timer_ripe = 0, idle_timer_ripe = 0;

4428	      Lisp_Object timer = Qnil, idle_timer = Qnil;

0x00000000004ea740	4428	      Lisp_Object timer = Qnil, idle_timer = Qnil;

XUNTAG (type=6, a=19567478) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

XCAR (c=19567478) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

timer_check_2 (idle_timers=19567478, timers=12223666) at keyboard.c:4460
4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea756	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea759	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea75e	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea760	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

XCDR (c=19567494) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=19567494, timers=12223666) at keyboard.c:4426
4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea76e	4426	  while (CONSP (timers) || CONSP (idle_timers))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x00000000004ea724	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=19567494, timers=12223666) at keyboard.c:4426
4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea72a	4426	  while (CONSP (timers) || CONSP (idle_timers))

4428	      Lisp_Object timer = Qnil, idle_timer = Qnil;

4433	      bool ripe, timer_ripe = 0, idle_timer_ripe = 0;

4428	      Lisp_Object timer = Qnil, idle_timer = Qnil;

0x00000000004ea740	4428	      Lisp_Object timer = Qnil, idle_timer = Qnil;

XUNTAG (type=6, a=19567494) at lisp.h:704
704	LISP_MACRO_DEFUN (XUNTAG, void *, (Lisp_Object a, int type), (a, type))

XCAR (c=19567494) at lisp.h:1054
1054	LISP_MACRO_DEFUN (XCAR, Lisp_Object, (Lisp_Object c), (c))

timer_check_2 (idle_timers=19567494, timers=12223666) at keyboard.c:4460
4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea756	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea759	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea75e	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

0x00000000004ea760	4460		  if (! decode_timer (idle_timer, &idle_timer_time))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

XCDR (c=12223666) at lisp.h:1055
1055	LISP_MACRO_DEFUN (XCDR, Lisp_Object, (Lisp_Object c), (c))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=12223666, timers=12223666) at keyboard.c:4426
4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea76e	4426	  while (CONSP (timers) || CONSP (idle_timers))

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x00000000004ea724	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

timer_check_2 (idle_timers=12223666, timers=12223666) at keyboard.c:4426
4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea72a	4426	  while (CONSP (timers) || CONSP (idle_timers))

4426	  while (CONSP (timers) || CONSP (idle_timers))

0x00000000004ea9f7	4426	  while (CONSP (timers) || CONSP (idle_timers))

4426	  while (CONSP (timers) || CONSP (idle_timers))

timer_check () at keyboard.c:4588
4588	}

0x00000000004ea994	4588	}

0x00000000004ea997	4588	}

0x00000000004ea99a	4588	}

0x00000000004ea99b	4588	}

0x00000000004ea99c	4588	}

0x00000000004ea99e	4588	}

0x00000000004ea9a0	4588	}

0x00000000004ea9a2	4588	}

0x00000000004ea9a4	4588	}

0x00000000004eab91 in readable_events (flags=1) at keyboard.c:3448
3448	    timer_check ();

0x00000000004eab95	3448	    timer_check ();

3452	  if (kbd_fetch_ptr != kbd_store_ptr)

0x00000000004eaa75	3452	  if (kbd_fetch_ptr != kbd_store_ptr)

0x00000000004eaa7c	3452	  if (kbd_fetch_ptr != kbd_store_ptr)

0x00000000004eaa7f	3452	  if (kbd_fetch_ptr != kbd_store_ptr)

3488		return 1;

3454	      if (flags & (READABLE_EVENTS_FILTER_EVENTS

0x00000000004eaa8a	3454	      if (flags & (READABLE_EVENTS_FILTER_EVENTS

3507	}

0x00000000004eab49	3507	}

0x00000000004eba98 in get_input_pending (flags=flags@entry=1) at keyboard.c:6766
6766	  input_pending = (!NILP (Vquit_flag) || readable_events (flags));

0x00000000004eba9a	6766	  input_pending = (!NILP (Vquit_flag) || readable_events (flags));

0x00000000004eba9c	6766	  input_pending = (!NILP (Vquit_flag) || readable_events (flags));

0x00000000004ebaa3	6766	  input_pending = (!NILP (Vquit_flag) || readable_events (flags));

6777	}

0x00000000004ebaa9	6777	}

detect_input_pending_run_timers (do_display=do_display@entry=true) at keyboard.c:9897
9897	  if (old_timers_run != timers_run && do_display)

0x00000000004eeb6e	9897	  if (old_timers_run != timers_run && do_display)

0x00000000004eeb70	9897	  if (old_timers_run != timers_run && do_display)

0x00000000004eeb72	9897	  if (old_timers_run != timers_run && do_display)

9898	    redisplay_preserve_echo_area (8);

0x00000000004eeb79	9898	    redisplay_preserve_echo_area (8);

0x00000000004eeb7e	9898	    redisplay_preserve_echo_area (8);

9901	}

0x00000000004eeb89	9901	}

0x00000000004eeb8a	9901	}

0x00000000004eeb8b	9901	}

0x0000000000593f75 in wait_reading_process_output (time_limit=time_limit@entry=0, nsecs=nsecs@entry=0, read_kbd=read_kbd@entry=-1, do_display=true, 
    wait_for_cell=wait_for_cell@entry=12223666, wait_proc=wait_proc@entry=0x0, just_wait_proc=0) at process.c:4702
4702		  if (detect_input_pending_run_timers (do_display))

0x0000000000593f77	4702		  if (detect_input_pending_run_timers (do_display))

4704		      swallow_events (do_display);

0x0000000000595183	4704		      swallow_events (do_display);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffcf28) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcf28) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199535) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199535) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcf28) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf28) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199535) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199535) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf28) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199535) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf28)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0.5, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf28) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf28) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf28) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=500000) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2660) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2660) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=500000) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=500000, f=12199527) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a082	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

1514		  DISCARD (1);

1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6c9	1515		  TOP = Ftimes (2, &TOP);

0x000000000058b6cc	1515		  TOP = Ftimes (2, &TOP);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffcf30) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcf30) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=12199519) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199519) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcf30) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d88	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d8c	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

0x0000000000541fc8	2614	      if (FLOATP (val))

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fcf	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd4	2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fd7	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fe2	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

0x0000000000541fe6	2615		return float_arith_driver (ok_accum, ok_args, code,

2679	}

0x0000000000541fea	2679	}

0x0000000000541fec	2679	}

0x0000000000541fee	2679	}

0x0000000000541ff0	2679	}

2615		return float_arith_driver (ok_accum, ok_args, code,

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf30) at data.c:2691
2691	  for (; argnum < nargs; argnum++)

0x0000000000541b43	2691	  for (; argnum < nargs; argnum++)

2687	{

2705	      switch (code)

2687	{

0x0000000000541b50	2687	{

0x0000000000541b53	2687	{

0x0000000000541b55	2687	{

0x0000000000541b58	2687	{

0x0000000000541b59	2687	{

0x0000000000541b5c	2687	{

0x0000000000541b5d	2687	{

0x0000000000541b60	2687	{

0x0000000000541b64	2687	{

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=12199519) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=12199519) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=1, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf30) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8a	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b8d	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XFLOAT_DATA (f=12199519) at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

0x0000000000541cc4 in float_arith_driver (accum=<optimized out>, argnum=argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf30)
    at lisp.h:2295
2295	  return XFLOAT (f)->u.data;

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2693	      val = args[argnum];    /* using args[argnum] as argument to CHECK_NUMBER_... */

XTYPE (a=4000000) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b6f	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541b71	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=4000000) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541b77	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

float_arith_driver (accum=0, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf30) at data.c:2694
2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b84	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541b88	2694	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2696	      if (FLOATP (val))

0x0000000000541b96	2696	      if (FLOATP (val))

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf30) at data.c:2703
2703		  next = XINT (args[argnum]);

2702		  args[argnum] = val;    /* runs into a compiler bug. */

XINT (a=<optimized out>) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

float_arith_driver (accum=<optimized out>, argnum=1, argnum@entry=0, code=code@entry=Amult, nargs=2, args=args@entry=0x7fffffffcf30) at data.c:2703
2703		  next = XINT (args[argnum]);

2705	      switch (code)

0x0000000000541bb5	2705	      switch (code)

0x0000000000541bb7	2705	      switch (code)

2714		  accum *= next;

2715		  break;

2691	  for (; argnum < nargs; argnum++)

0x0000000000541be4	2691	  for (; argnum < nargs; argnum++)

0x0000000000541be7	2691	  for (; argnum < nargs; argnum++)

2742	}

0x0000000000541bf1	2742	}

0x0000000000541bf2	2742	}

0x0000000000541bf3	2742	}

0x0000000000541bf5	2742	}

0x0000000000541bf7	2742	}

2741	  return make_float (accum);

make_float (float_value=0) at alloc.c:2352
2352	{

2357	  if (float_free_list)

0x000000000053bc1b	2357	  if (float_free_list)

0x000000000053bc1e	2357	  if (float_free_list)

make_lisp_ptr (type=Lisp_Float, ptr=0xba2650) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

make_lisp_ptr (type=Lisp_Float, ptr=0xba2650) at lisp.h:953
953	  Lisp_Object a = XIL (typebits | (uintptr_t) ptr);

make_float (float_value=0) at alloc.c:2362
2362	      float_free_list = float_free_list->u.chain;

0x000000000053bc31	2362	      float_free_list = float_free_list->u.chain;

2386	  total_free_floats--;

XFLOAT_INIT (n=0, f=12199511) at alloc.c:403
403	  XFLOAT (f)->u.data = n;

make_float (float_value=<optimized out>) at alloc.c:2384
2384	  consing_since_gc += sizeof (struct Lisp_Float);

2386	  total_free_floats--;

2385	  floats_consed++;

2388	}

0x000000000053bc5c	2388	}

0x000000000058b6d1 in exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:1515
1515		  TOP = Ftimes (2, &TOP);

1517		  NEXT;

0x000000000058b6d8	1517		  NEXT;

0x000000000058b6dc	1517		  NEXT;

0x000000000058b6e0	1517		  NEXT;

0x000000000058b6e3	1517		  NEXT;

0x000000000058b6e6	1517		  NEXT;

0x000000000058b6ee	1517		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a087	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e6e	927		  goto dounbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eac	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589bfb	744		    NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a1cf	1114		    type = CONDITION_CASE;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

0x0000000000589f0a	781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

781		    v1 = POP;

782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f19	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

0x0000000000589f21	782		    TOP = EQ (v1, TOP) ? Qt : Qnil;

783		    NEXT;

0x0000000000589f29	783		    NEXT;

0x0000000000589f2d	783		    NEXT;

0x0000000000589f31	783		    NEXT;

0x0000000000589f34	783		    NEXT;

0x0000000000589f37	783		    NEXT;

0x0000000000589f3f	783		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

0x000000000058ad91	1253		  TOP = Flist (4, &TOP);

0x000000000058ad94	1253		  TOP = Flist (4, &TOP);

0x000000000058ad99	1253		  TOP = Flist (4, &TOP);

1254		  NEXT;

0x000000000058ada0	1254		  NEXT;

0x000000000058ada4	1254		  NEXT;

0x000000000058ada8	1254		  NEXT;

0x000000000058adab	1254		  NEXT;

0x000000000058adae	1254		  NEXT;

0x000000000058adb6	1254		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=18338581, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd0f0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd0f0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=18338693, nargs=nargs@entry=1, arg_vector=arg_vector@entry=0x7fffffffd0f0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=21, value=19587382) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=21, value=19587382) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=21, value=19587382) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd0e8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd0e8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5b3	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a5ba	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a5ce	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:952
952		  BYTE_CODE_QUIT;

0x000000000058a5ef	952		  BYTE_CODE_QUIT;

0x000000000058a5f2	952		  BYTE_CODE_QUIT;

0x000000000058a601	952		  BYTE_CODE_QUIT;

0x000000000058a608	952		  BYTE_CODE_QUIT;

0x000000000058a60a	952		  BYTE_CODE_QUIT;

953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a614	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a618	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a61c	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a620	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a623	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a627	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62b	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

0x000000000058a62e	953		  op = FETCH2;    /* pc = FETCH2 loses since FETCH2 contains pc++ */

955		  stack.pc = stack.byte_string_start + op;

0x000000000058a632	955		  stack.pc = stack.byte_string_start + op;

956		  NEXT;

0x000000000058a63a	956		  NEXT;

0x000000000058a63e	956		  NEXT;

0x000000000058a641	956		  NEXT;

0x000000000058a644	956		  NEXT;

0x000000000058a64c	956		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x000000000058a082	866		  goto varbind;

874		  op -= Bvarbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a658	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a65f	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a673	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:962
962		    op = FETCH2;

963		    v1 = POP;

962		    op = FETCH2;

0x000000000058a699	962		    op = FETCH2;

0x000000000058a69d	962		    op = FETCH2;

0x000000000058a6a1	962		    op = FETCH2;

0x000000000058a6a5	962		    op = FETCH2;

0x000000000058a6a9	962		    op = FETCH2;

963		    v1 = POP;

0x000000000058a6b0	963		    v1 = POP;

0x000000000058a6b4	963		    v1 = POP;

964		    if (!NILP (v1))

0x000000000058a6bb	964		    if (!NILP (v1))

966			BYTE_CODE_QUIT;

0x000000000058a6c4	966			BYTE_CODE_QUIT;

0x000000000058a6c7	966			BYTE_CODE_QUIT;

0x000000000058a6d6	966			BYTE_CODE_QUIT;

0x000000000058a6dd	966			BYTE_CODE_QUIT;

0x000000000058a6df	966			BYTE_CODE_QUIT;

962		    op = FETCH2;

0x000000000058a6e8	962		    op = FETCH2;

0x000000000058a6eb	962		    op = FETCH2;

968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f0	968			stack.pc = stack.byte_string_start + op;

0x000000000058a6f4	968			stack.pc = stack.byte_string_start + op;

970		    NEXT;

0x000000000058a6fb	970		    NEXT;

0x000000000058a6ff	970		    NEXT;

0x000000000058a702	970		    NEXT;

0x000000000058a705	970		    NEXT;

0x000000000058a70d	970		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d78	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a79e	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a7a5	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a7b9	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:987
987		  op = FETCH2;

0x000000000058a7d7	987		  op = FETCH2;

0x000000000058a7db	987		  op = FETCH2;

0x000000000058a7df	987		  op = FETCH2;

0x000000000058a7e3	987		  op = FETCH2;

0x000000000058a7e7	987		  op = FETCH2;

0x000000000058a7eb	987		  op = FETCH2;

988		  if (!NILP (TOP))

0x000000000058a7f3	988		  if (!NILP (TOP))

0x000000000058a7f6	988		  if (!NILP (TOP))

990		      BYTE_CODE_QUIT;

0x000000000058a803	990		      BYTE_CODE_QUIT;

0x000000000058a806	990		      BYTE_CODE_QUIT;

0x000000000058a815	990		      BYTE_CODE_QUIT;

0x000000000058a81c	990		      BYTE_CODE_QUIT;

0x000000000058a81e	990		      BYTE_CODE_QUIT;

987		  op = FETCH2;

0x000000000058a827	987		  op = FETCH2;

0x000000000058a82a	987		  op = FETCH2;

992		      stack.pc = stack.byte_string_start + op;

0x000000000058a82f	992		      stack.pc = stack.byte_string_start + op;

0x000000000058a833	992		      stack.pc = stack.byte_string_start + op;

995		  NEXT;

0x000000000058a83a	995		  NEXT;

0x000000000058a83e	995		  NEXT;

0x000000000058a841	995		  NEXT;

0x000000000058a844	995		  NEXT;

0x000000000058a84c	995		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a79e	4559	  if ((consing_since_gc > gc_cons_threshold

0x000000000058a7a5	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x000000000058a7b9	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:987
987		  op = FETCH2;

0x000000000058a7d7	987		  op = FETCH2;

0x000000000058a7db	987		  op = FETCH2;

0x000000000058a7df	987		  op = FETCH2;

0x000000000058a7e3	987		  op = FETCH2;

0x000000000058a7e7	987		  op = FETCH2;

0x000000000058a7eb	987		  op = FETCH2;

988		  if (!NILP (TOP))

0x000000000058a7f3	988		  if (!NILP (TOP))

0x000000000058a7f6	988		  if (!NILP (TOP))

994		  else DISCARD (1);

0x000000000058c722	994		  else DISCARD (1);

995		  NEXT;

0x000000000058a83a	995		  NEXT;

0x000000000058a83e	995		  NEXT;

0x000000000058a841	995		  NEXT;

0x000000000058a844	995		  NEXT;

0x000000000058a84c	995		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

1252		  DISCARD (3);

1253		  TOP = Flist (4, &TOP);

0x000000000058ad91	1253		  TOP = Flist (4, &TOP);

0x000000000058ad94	1253		  TOP = Flist (4, &TOP);

0x000000000058ad99	1253		  TOP = Flist (4, &TOP);

1254		  NEXT;

0x000000000058ada0	1254		  NEXT;

0x000000000058ada4	1254		  NEXT;

0x000000000058ada8	1254		  NEXT;

0x000000000058adab	1254		  NEXT;

0x000000000058adae	1254		  NEXT;

0x000000000058adb6	1254		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589fcb	809		    NEXT;

818		  op -= Bvarset;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589b86	848		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d73	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984461, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984301, nargs=nargs@entry=4, arg_vector=arg_vector@entry=0x7fffffffd2c0) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984301, nargs=nargs@entry=4, arg_vector=arg_vector@entry=0x7fffffffd2c0) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984301, nargs=nargs@entry=4, arg_vector=arg_vector@entry=0x7fffffffd2c0) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=16, value=19587190) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=19587190) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=19587190) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=19587190) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=16, value=19587190) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=16, value=19587190) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd2b8) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd2b8) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9984941, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984941, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984941, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984941, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

1054		  result = POP;

2020	  byte_stack_list = byte_stack_list->next;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

0x000000000058ab2c	2894	  return specpdl_ptr - specpdl;

0x000000000058ab33	2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9984941, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:2023
2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab3a	2023	  if (SPECPDL_INDEX () != count)

0x000000000058ab40	2023	  if (SPECPDL_INDEX () != count)

2031	}

0x000000000058ab47	2031	}

0x000000000058ab48	2031	}

0x000000000058ab4a	2031	}

0x000000000058ab4c	2031	}

0x000000000058ab4e	2031	}

0x000000000058ab50	2031	}

0x000000000058ab51	2031	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984845, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd470) at eval.c:3050
3050	  return unbind_to (count, val);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984845, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd470) at eval.c:3051
3051	}

0x00000000005559a0	3051	}

0x00000000005559a1	3051	}

0x00000000005559a2	3051	}

0x00000000005559a4	3051	}

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

funcall_lambda (fun=9984845, nargs=nargs@entry=3, arg_vector=arg_vector@entry=0x7fffffffd470) at eval.c:3051
3051	}

0x00000000005559ac	3051	}

3050	  return unbind_to (count, val);

unbind_to (count=count@entry=10, value=19587238) at eval.c:3282
3282	{

0x0000000000554982	3282	{

0x0000000000554984	3282	{

0x0000000000554986	3282	{

0x0000000000554988	3282	{

0x000000000055498b	3282	{

0x000000000055498c	3282	{

0x000000000055498d	3282	{

0x0000000000554990	3282	{

0x0000000000554994	3282	{

3287	  Vquit_flag = Qnil;

0x000000000055499f	3287	  Vquit_flag = Qnil;

0x00000000005549a6	3287	  Vquit_flag = Qnil;

0x00000000005549a9	3287	  Vquit_flag = Qnil;

3283	  Lisp_Object quitf = Vquit_flag;

3287	  Vquit_flag = Qnil;

0x00000000005549be	3287	  Vquit_flag = Qnil;

0x00000000005549c1	3287	  Vquit_flag = Qnil;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=10, value=19587238) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=10, value=19587238) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=10, value=19587238) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

3298	      switch (specpdl_ptr->kind)

3296	      specpdl_ptr--;

0x00000000005549db	3296	      specpdl_ptr--;

3298	      switch (specpdl_ptr->kind)

0x00000000005549e6	3298	      switch (specpdl_ptr->kind)

0x00000000005549ea	3298	      switch (specpdl_ptr->kind)

0x0000000000554a78	3344		      set_internal (symbol, old_value, where, 1);

0x0000000000554a7f	3344		      set_internal (symbol, old_value, where, 1);

3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a87	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8a	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554a8d	3319		    if (sym->redirect == SYMBOL_PLAINVAL)

0x0000000000554b68	3355	}

SET_SYMBOL_VAL (v=<optimized out>, sym=<optimized out>) at lisp.h:1661
1661	LISP_MACRO_DEFUN_VOID (SET_SYMBOL_VAL,

unbind_to (count=count@entry=10, value=19587238) at eval.c:3296
3296	      specpdl_ptr--;

0x0000000000554b73	3296	      specpdl_ptr--;

3296	      specpdl_ptr--;

3289	  while (specpdl_ptr != specpdl + count)

0x00000000005549cd	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b30	3289	  while (specpdl_ptr != specpdl + count)

0x0000000000554b32	3289	  while (specpdl_ptr != specpdl + count)

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

unbind_to (count=count@entry=10, value=19587238) at eval.c:3350
3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b42	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b44	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

0x0000000000554b47	3350	  if (NILP (Vquit_flag) && !NILP (quitf))

3355	}

0x0000000000554b54	3355	}

0x0000000000554b57	3355	}

0x0000000000554b58	3355	}

0x0000000000554b59	3355	}

0x0000000000554b5b	3355	}

0x0000000000554b5d	3355	}

0x0000000000554b5f	3355	}

0x0000000000554b61	3355	}

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd468) at eval.c:2883
2883	  lisp_eval_depth--;

backtrace_debug_on_exit (pdl=<optimized out>) at eval.c:176
176	  return pdl->bt.debug_on_exit;

0x0000000000555d27	176	  return pdl->bt.debug_on_exit;

Ffuncall (nargs=<optimized out>, args=args@entry=0x7fffffffd468) at eval.c:2884
2884	  if (backtrace_debug_on_exit (specpdl + count))

0x0000000000555d33	2884	  if (backtrace_debug_on_exit (specpdl + count))

2886	  specpdl_ptr--;

2888	}

0x0000000000555d58	2888	}

0x0000000000555d59	2888	}

0x0000000000555d5b	2888	}

0x0000000000555d5d	2888	}

0x0000000000555d5f	2888	}

0x0000000000555d61	2888	}

0x0000000000555d62	2888	}

0x0000000000589c76 in exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, 
    nargs=nargs@entry=0, args=<optimized out>, args@entry=0x0) at bytecode.c:916
916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

XTYPE (a=40) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x000000000058c166	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

NUMBERP (x=40) at lisp.h:2359
2359	  return INTEGERP (x) || FLOATP (x);

0x000000000058c16b	2359	  return INTEGERP (x) || FLOATP (x);

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:1920
1920		  TOP = (NUMBERP (TOP) ? Qt : Qnil);

0x000000000058c178	1920		  TOP = (NUMBERP (TOP) ? Qt : Qnil);

0x000000000058c17c	1920		  TOP = (NUMBERP (TOP) ? Qt : Qnil);

1921		  NEXT;

0x000000000058c183	1921		  NEXT;

0x000000000058c187	1921		  NEXT;

0x000000000058c18b	1921		  NEXT;

0x000000000058c18e	1921		  NEXT;

0x000000000058c191	1921		  NEXT;

0x000000000058c199	1921		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1440		    v1 = POP;

1441		    TOP = arithcompare (TOP, v1, ARITH_LESS);

1440		    v1 = POP;

0x000000000058b428	1440		    v1 = POP;

1441		    TOP = arithcompare (TOP, v1, ARITH_LESS);

1440		    v1 = POP;

1441		    TOP = arithcompare (TOP, v1, ARITH_LESS);

0x000000000058b437	1441		    TOP = arithcompare (TOP, v1, ARITH_LESS);

0x000000000058b43a	1441		    TOP = arithcompare (TOP, v1, ARITH_LESS);

0x000000000058b43f	1441		    TOP = arithcompare (TOP, v1, ARITH_LESS);

1443		    NEXT;

0x000000000058b447	1443		    NEXT;

0x000000000058b44b	1443		    NEXT;

0x000000000058b44f	1443		    NEXT;

0x000000000058b452	1443		    NEXT;

0x000000000058b455	1443		    NEXT;

0x000000000058b45d	1443		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb6	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589eb1	888		  goto docall;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1272		    v1 = POP;

0x000000000058aebf	1272		    v1 = POP;

0x000000000058aec2	1272		    v1 = POP;

1273		    TOP = Faref (TOP, v1);

1272		    v1 = POP;

1273		    TOP = Faref (TOP, v1);

0x000000000058aed1	1273		    TOP = Faref (TOP, v1);

0x000000000058aed4	1273		    TOP = Faref (TOP, v1);

0x000000000058aed9	1273		    TOP = Faref (TOP, v1);

1275		    NEXT;

0x000000000058aee1	1275		    NEXT;

0x000000000058aee5	1275		    NEXT;

0x000000000058aee9	1275		    NEXT;

0x000000000058aeec	1275		    NEXT;

0x000000000058aeef	1275		    NEXT;

0x000000000058aef7	1275		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1521		  DISCARD (1);

1522		  TOP = Fquo (2, &TOP);

1521		  DISCARD (1);

1522		  TOP = Fquo (2, &TOP);

0x000000000058b4e9	1522		  TOP = Fquo (2, &TOP);

0x000000000058b4ec	1522		  TOP = Fquo (2, &TOP);

0x000000000058b4f1	1522		  TOP = Fquo (2, &TOP);

1524		  NEXT;

0x000000000058b4f8	1524		  NEXT;

0x000000000058b4fc	1524		  NEXT;

0x000000000058b500	1524		  NEXT;

0x000000000058b503	1524		  NEXT;

0x000000000058b506	1524		  NEXT;

0x000000000058b50e	1524		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

853		    v1 = TOP;

0x000000000058a02b	853		    v1 = TOP;

854		    PUSH (v1);

0x000000000058a032	854		    PUSH (v1);

0x000000000058a036	854		    PUSH (v1);

855		    NEXT;

0x000000000058a03d	855		    NEXT;

0x000000000058a041	855		    NEXT;

0x000000000058a045	855		    NEXT;

0x000000000058a048	855		    NEXT;

0x000000000058a04b	855		    NEXT;

0x000000000058a053	855		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

861		  op = FETCH;

0x000000000058a017	861		  op = FETCH;

0x000000000058a01b	861		  op = FETCH;

0x000000000058a01f	861		  op = FETCH;

862		  goto varbind;

878		  specbind (vectorp[op], POP);

0x0000000000589c07	878		  specbind (vectorp[op], POP);

0x0000000000589c0a	878		  specbind (vectorp[op], POP);

0x0000000000589c0d	878		  specbind (vectorp[op], POP);

0x0000000000589c11	878		  specbind (vectorp[op], POP);

0x0000000000589c15	878		  specbind (vectorp[op], POP);

0x0000000000589c19	878		  specbind (vectorp[op], POP);

0x0000000000589c1d	878		  specbind (vectorp[op], POP);

0x0000000000589c20	878		  specbind (vectorp[op], POP);

0x0000000000589c23	878		  specbind (vectorp[op], POP);

880		  NEXT;

0x0000000000589c2c	880		  NEXT;

0x0000000000589c30	880		  NEXT;

0x0000000000589c34	880		  NEXT;

0x0000000000589c37	880		  NEXT;

0x0000000000589c3a	880		  NEXT;

0x0000000000589c42	880		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

720		  op = FETCH;

0x0000000000589d86	720		  op = FETCH;

0x0000000000589d8a	720		  op = FETCH;

0x0000000000589d8e	720		  op = FETCH;

0x0000000000589d91	720		  op = FETCH;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1430		    v1 = POP;

1431		    TOP = arithcompare (TOP, v1, ARITH_GRTR);

1430		    v1 = POP;

0x000000000058b2a8	1430		    v1 = POP;

1431		    TOP = arithcompare (TOP, v1, ARITH_GRTR);

1430		    v1 = POP;

1431		    TOP = arithcompare (TOP, v1, ARITH_GRTR);

0x000000000058b2b7	1431		    TOP = arithcompare (TOP, v1, ARITH_GRTR);

0x000000000058b2ba	1431		    TOP = arithcompare (TOP, v1, ARITH_GRTR);

0x000000000058b2bf	1431		    TOP = arithcompare (TOP, v1, ARITH_GRTR);

1433		    NEXT;

0x000000000058b2c7	1433		    NEXT;

0x000000000058b2cb	1433		    NEXT;

0x000000000058b2cf	1433		    NEXT;

0x000000000058b2d2	1433		    NEXT;

0x000000000058b2d5	1433		    NEXT;

0x000000000058b2dd	1433		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

maybe_gc () at lisp.h:4559
4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589d9d	4559	  if ((consing_since_gc > gc_cons_threshold

0x0000000000589da4	4559	  if ((consing_since_gc > gc_cons_threshold

NILP (x=<optimized out>) at lisp.h:2354
2354	LISP_MACRO_DEFUN (NILP, bool, (Lisp_Object x), (x))

maybe_gc () at lisp.h:4561
4561	      || (!NILP (Vmemory_full)

0x0000000000589db8	4561	      || (!NILP (Vmemory_full)

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:751
751		    op = FETCH2;

752		    v1 = POP;

751		    op = FETCH2;

0x0000000000589dde	751		    op = FETCH2;

0x0000000000589de2	751		    op = FETCH2;

0x0000000000589de6	751		    op = FETCH2;

0x0000000000589dea	751		    op = FETCH2;

0x0000000000589dee	751		    op = FETCH2;

752		    v1 = POP;

0x0000000000589df5	752		    v1 = POP;

0x0000000000589df9	752		    v1 = POP;

753		    if (NILP (v1))

0x0000000000589e00	753		    if (NILP (v1))

755			BYTE_CODE_QUIT;

0x000000000058c76a	755			BYTE_CODE_QUIT;

0x000000000058c76d	755			BYTE_CODE_QUIT;

0x000000000058c77c	755			BYTE_CODE_QUIT;

0x000000000058c783	755			BYTE_CODE_QUIT;

0x000000000058c785	755			BYTE_CODE_QUIT;

751		    op = FETCH2;

0x000000000058c78e	751		    op = FETCH2;

0x000000000058c791	751		    op = FETCH2;

757			stack.pc = stack.byte_string_start + op;

0x000000000058c797	757			stack.pc = stack.byte_string_start + op;

0x000000000058c79b	757			stack.pc = stack.byte_string_start + op;

759		    NEXT;

0x0000000000589e0a	759		    NEXT;

0x0000000000589e0e	759		    NEXT;

0x0000000000589e11	759		    NEXT;

0x0000000000589e14	759		    NEXT;

0x0000000000589e1c	759		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e64	927		  goto dounbind;

935		  op -= Bunbind;

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

SPECPDL_INDEX () at lisp.h:2894
2894	  return specpdl_ptr - specpdl;

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:938
938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc2	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

0x0000000000589cc5	938		  unbind_to (SPECPDL_INDEX () - op, Qnil);

940		  NEXT;

0x0000000000589cce	940		  NEXT;

0x0000000000589cd2	940		  NEXT;

0x0000000000589cd6	940		  NEXT;

0x0000000000589cd9	940		  NEXT;

0x0000000000589cdc	940		  NEXT;

0x0000000000589ce4	940		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589d7d	1948	         call3 (intern ("error"),

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

714		  op = op - Bvarref;

725		    v1 = vectorp[op];

0x0000000000589b97	725		    v1 = vectorp[op];

0x0000000000589b9a	725		    v1 = vectorp[op];

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589ba0	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:726
726		    if (SYMBOLP (v1))

0x0000000000589ba6	726		    if (SYMBOLP (v1))

728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb0	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb3	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

0x0000000000589bb5	728			if (XSYMBOL (v1)->redirect != SYMBOL_PLAINVAL

SYMBOL_VAL (sym=<optimized out>) at lisp.h:1640
1640	LISP_MACRO_DEFUN (SYMBOL_VAL, Lisp_Object, (struct Lisp_Symbol *sym), (sym))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:729
729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bc6	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

0x0000000000589bcc	729			    || (v2 = SYMBOL_VAL (XSYMBOL (v1)),

743		    PUSH (v2);

0x0000000000589bd5	743		    PUSH (v2);

0x0000000000589bd9	743		    PUSH (v2);

744		    NEXT;

0x0000000000589be0	744		    NEXT;

0x0000000000589be4	744		    NEXT;

0x0000000000589be8	744		    NEXT;

0x0000000000589beb	744		    NEXT;

0x0000000000589bee	744		    NEXT;

0x0000000000589bf6	744		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

0x0000000000589e35	923		  goto dounbind;

896		  op -= Bcall;

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

900		    DISCARD (op);

0x0000000000589c64	900		    DISCARD (op);

916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6b	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c6e	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c71	916		    TOP = Ffuncall (op + 1, &TOP);

0x0000000000589c76	916		    TOP = Ffuncall (op + 1, &TOP);

918		    NEXT;

0x0000000000589c7d	918		    NEXT;

0x0000000000589c81	918		    NEXT;

0x0000000000589c85	918		    NEXT;

0x0000000000589c88	918		    NEXT;

0x0000000000589c8b	918		    NEXT;

0x0000000000589c93	918		    NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1059		  NEXT;

1058		  DISCARD (1);

1059		  NEXT;

0x000000000058ab5f	1059		  NEXT;

0x000000000058ab63	1059		  NEXT;

0x000000000058ab66	1059		  NEXT;

0x000000000058ab69	1059		  NEXT;

0x000000000058ab71	1059		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

826		  op = FETCH;

0x000000000058a003	826		  op = FETCH;

0x000000000058a007	826		  op = FETCH;

0x000000000058a00b	826		  op = FETCH;

0x000000000058a00e	826		  op = FETCH;

831		    sym = vectorp[op];

0x0000000000589b17	831		    sym = vectorp[op];

0x0000000000589b1a	831		    sym = vectorp[op];

832		    val = TOP;

0x0000000000589b22	832		    val = TOP;

XTYPE (a=<optimized out>) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000589b27	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

exec_byte_code (bytestr=<optimized out>, vector=9987885, maxdepth=<optimized out>, args_template=<optimized out>, nargs=nargs@entry=0, 
    args=<optimized out>, args@entry=0x0) at bytecode.c:835
835		    if (SYMBOLP (sym)

0x0000000000589b2d	835		    if (SYMBOLP (sym)

836			&& !EQ (val, Qunbound)

0x0000000000589b36	836			&& !EQ (val, Qunbound)

837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3c	837			&& !XSYMBOL (sym)->redirect

0x0000000000589b3e	837			&& !XSYMBOL (sym)->redirect

843			set_internal (sym, val, Qnil, 0);

0x0000000000589b57	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5a	843			set_internal (sym, val, Qnil, 0);

0x0000000000589b5d	843			set_internal (sym, val, Qnil, 0);

848		  NEXT;

847		  (void) POP;

848		  NEXT;

0x0000000000589b6f	848		  NEXT;

0x0000000000589b73	848		  NEXT;

0x0000000000589b76	848		  NEXT;

0x0000000000589b79	848		  NEXT;

0x0000000000589b81	848		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a90	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a95	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589a99	2012		  PUSH (vectorp[op - Bconstant]);

0x0000000000589aa1	2012		  PUSH (vectorp[op - Bconstant]);

2014		  NEXT;

0x0000000000589aa8	2014		  NEXT;

0x0000000000589aac	2014		  NEXT;

0x0000000000589ab0	2014		  NEXT;

0x0000000000589ab3	2014		  NEXT;

0x0000000000589ab6	2014		  NEXT;

0x0000000000589abe	2014		  NEXT;

0x0000000000589ac0	2014		  NEXT;

0x0000000000589ac4	2014		  NEXT;

1159		    handlers = POP;

0x000000000058a3bd	1159		    handlers = POP;

1160		    body = POP;

1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

1160		    body = POP;

1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3d0	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3d3	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);

0x000000000058a3d6	1162		    TOP = internal_lisp_condition_case (TOP, body, handlers);


Breakpoint 1, Ftimes (nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2767
2767	{

2768	  return arith_driver (Amult, nargs, args);

0x0000000000542146	2768	  return arith_driver (Amult, nargs, args);

0x000000000054214b	2768	  return arith_driver (Amult, nargs, args);

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2577
2577	{

0x0000000000541d02	2577	{

0x0000000000541d04	2577	{

0x0000000000541d06	2577	{

0x0000000000541d08	2577	{

0x0000000000541d09	2577	{

0x0000000000541d0a	2577	{

2593	      accum = 1;

2584	  switch (code)

0x0000000000541d1a	2584	  switch (code)

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d30	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d36	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3b	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d3e	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d41	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d44	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d46	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d49	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d4c	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d55	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=40) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=40) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

2617	      args[argnum] = val;

XINT (a=40) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2619
2619	      switch (code)

0x0000000000541da9	2619	      switch (code)

0x0000000000541dab	2619	      switch (code)

2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e33	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e39	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e3f	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e42	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e48	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e52	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e54	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e57	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5a	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5d	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5f	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

2645		    accum *= next;

0x0000000000541f44	2645		    accum *= next;

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541dd4	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541dd7	2602	  for (argnum = 0; argnum < nargs; argnum++)

2604	      if (! overflow)

0x0000000000541de0	2604	      if (! overflow)

0x0000000000542018	2635		  accum = argnum ? accum - next : nargs == 1 ? - next : next;

0x000000000054201d	2635		  accum = argnum ? accum - next : nargs == 1 ? - next : next;

0x0000000000542022	2635		  accum = argnum ? accum - next : nargs == 1 ? - next : next;

0x0000000000541d58	2602	  for (argnum = 0; argnum < nargs; argnum++)

2619	      switch (code)

2611	      val = args[argnum];

0x0000000000541d64	2611	      val = args[argnum];

XTYPE (a=8) at lisp.h:703
703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6b	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

0x0000000000541d6d	703	LISP_MACRO_DEFUN (XTYPE, enum Lisp_Type, (Lisp_Object a), (a))

MARKERP (x=8) at lisp.h:2384
2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

0x0000000000541d75	2384	LISP_MACRO_DEFUN (MARKERP, bool, (Lisp_Object x), (x))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2612
2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d82	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

0x0000000000541d86	2612	      CHECK_NUMBER_OR_FLOAT_COERCE_MARKER (val);

2614	      if (FLOATP (val))

0x0000000000541d96	2614	      if (FLOATP (val))

2617	      args[argnum] = val;

XINT (a=8) at lisp.h:701
701	LISP_MACRO_DEFUN (XINT, EMACS_INT, (Lisp_Object a), (a))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2619
2619	      switch (code)

0x0000000000541da9	2619	      switch (code)

0x0000000000541dab	2619	      switch (code)

2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e33	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e39	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e3f	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e42	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e48	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e52	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e54	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e57	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5a	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5d	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

0x0000000000541e5f	2638		  if (INT_MULTIPLY_OVERFLOW (accum, next))

2645		    accum *= next;

0x0000000000541f44	2645		    accum *= next;

2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541dd4	2602	  for (argnum = 0; argnum < nargs; argnum++)

0x0000000000541dd7	2602	  for (argnum = 0; argnum < nargs; argnum++)

make_number (n=20) at lisp.h:700
700	LISP_MACRO_DEFUN (make_number, Lisp_Object, (EMACS_INT n), (n))

arith_driver (code=code@entry=Amult, nargs=nargs@entry=2, args=args@entry=0x7fffffffcfc8) at data.c:2679
2679	}

0x0000000000541f06	2679	}

0x0000000000541f07	2679	}

0x0000000000541f08	2679	}

0x0000000000541f0a	2679	}

0x0000000000541f0c	2679	}

0x0000000000541f0e	2679	}

0x0000000000541f10	2679	}
(gdb) quit
A debugging session is active.

	Inferior 1 [process 33018] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
