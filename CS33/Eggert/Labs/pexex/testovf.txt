We shall list out the different types of compilations and will make note of what it does in particular.
========================================================================================================================================================================================================
Compilation with -O2
-------------------------------------------------------------------
	testovf:
	.LFB0:
		.cfi_startproc
		xorl	%eax, %eax
		ret
		.cfi_endproc
	.LFE0:
		.size	testovf, .-testovf
		.globl	big
		.data
		.align 8
		.type	big, @object
		.size	big, 8
	big:
		.quad	9223372036854775807
		.ident	"GCC: (GNU) 6.2.0"
		.section	.note.GNU-stack,"",@progbits
-------------------------------------------------------------------
	This code is highly optimized, without wrap around arithmetic specified (meaning that overflow is undefined behavior). The compiler in its optimization assumes that
	the implementer will not try to invoke undefined behavior, so it handles the code as if overflow will never happen. If the expression "big + LONG_MAX" does not overflow,
	it will always be greater than or equal to big, due to our regular rules of algebra (ie not wrap around). This is since
		
		big + LONG_MAX < big
	=>	LONG_MAX < 0	//Always false

	To handles this, the assembled code xorl the %eax register, essentially clearing it to 0. Then this returns. In simpler terms, the function always returns false since it assumes
	only the no overflow case.
========================================================================================================================================================================================================
Compilation with -O2 -fsanitize=undefined
-------------------------------------------------------------------		
	testovf:
	.LFB0:
		.cfi_startproc
		pushq	%rbp
		.cfi_def_cfa_offset 16
		.cfi_offset 6, -16
		pushq	%rbx
		.cfi_def_cfa_offset 24
		.cfi_offset 3, -24
		movabsq	$9223372036854775807, %rdx
		subq	$8, %rsp
		.cfi_def_cfa_offset 32
		movq	big(%rip), %rbx
		movq	%rbx, %rbp
		addq	%rdx, %rbp
		jo	.L6
	.L2:		
		cmpq	%rbp, %rbx
		setg	%al
		addq	$8, %rsp
		.cfi_remember_state
		.cfi_def_cfa_offset 24
		popq	%rbx
		.cfi_def_cfa_offset 16
		popq	%rbp
		.cfi_def_cfa_offset 8
		ret	
	.L6:		
		.cfi_restore_state
		movq	%rbx, %rsi
		movl	$.Lubsan_data0, %edi
		call	__ubsan_handle_add_overflow
		jmp	.L2
		.cfi_endproc
	big:		
		.quad	9223372036854775807
		.ident	"GCC: (GNU) 6.2.0"
		.section	.note.GNU-stack,"",@progbits
-------------------------------------------------------------------
	This code is highly optimized and places guards against undefined behavior. It begins by setting up the register %rbp to have the value of "big + LONG_MAX". Then it executes a conditional
	jump "jo," which is a jump if overflow. This jumps to a piece of code only if the addq storing into %rbx causes the OF flag to turn on. This overflow code passes the overflowed value to
	an external function called __ubsan_handle_add_overflow before jumping back to where it left off in the regular code. In the regular code where it resumes, it does a comparison between
	"big + LONG_MAX" and "big" and sets %al to 1 if big is greater, and 0 otherwise. It then pops the stack and returns. NOTE: The first part of the code where it sets up %rbp is essentially
	the same assembly as the next compilation with -O2 -fwrapv. What this compilation does in particular is call the __ubsan_handle_add_overflow if there is indeed overflow.
========================================================================================================================================================================================================
Compilation with -O2 -fwrapv
-------------------------------------------------------------------
	testovf:
	.LFB0:
		.cfi_startproc
		movq	big(%rip), %rdx
		movabsq	$9223372036854775807, %rax
		addq	%rdx, %rax
		cmpq	%rax, %rdx
		setg	%al
		ret
		.cfi_endproc
	.LFE0:
		.size	testovf, .-testovf
		.globl	big
		.data
		.align 8
		.type	big, @object
		.size	big, 8
	big:	
		.quad	9223372036854775807
		.ident	"GCC: (GNU) 6.2.0"
		.section	.note.GNU-stack,"",@progbits

-------------------------------------------------------------------
	This code is highly optimized with wrap around arithmetic, making overflow a defined operation in which the arithmetic just overflows. This code is a simple comparison between "big + LONG_MAX"
	and "big." It sets the %al register to 1 if "big" is greater, and 0 otherwise. It does not do any detection for overflow, but just does the grunt work of computing it. It also chooses not to do
	the same optimization just -O2 does, since now overflow arithmetic can indeed result in a true value as opposed to always false.

========================================================================================================================================================================================================
Comments
	As was noted above, these different types of compilation result in some aspects that are very similar, as well as some aspects that are fairly different. The first compilation with -O2 assumes 
	no wrap around arithmetic (unlike the third one with -fwrapv), and because of this it makes the algebraic decision to just return 0 every time. The second compilation and the third compilation
	have components that are very similar. The third compilation with -fwrapv just does a straightforward comparison, comparing the values of "big + LONG_MAX" and "big" without worry of overflow.
	The second compilation basically does the same, but instead of immediately returning a value, it calls a function __ubsan_handle_add_overflow first before doing so.

