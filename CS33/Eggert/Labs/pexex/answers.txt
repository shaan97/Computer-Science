1.) The incorrect mathematical results were produced because of overflow due to multiplication. Before the instruction

	=>0x541efa<arith_driver+506>data.c:2602	lea 0x0(,%rbx,4),%rax

%rbx held the correct value for the multiplication. However, when %rax took the value of 4 * %rbx, the result overflowed into the %rdx, giving %rax the value
-3586797023190552132. Presumably the code eventually takes this value and divides it by 4 to, in theory, get the old value back. But because of the
overflow, it gets a completely different answer: -896699255797638033. Thus, due to overflow at this lea instruction, the answer ends up being incorrect.

2.) most-positive-fixnum is a defined value on line 692 of lisp.h. It was created by evaluating the following:
	EMACS_INT_MAX >> INTTYPEBITS
    
	As mentioned in data.c:	/* The largest value that is representable in a Lisp integer.  */

3.) During execution, the following line is executed
	0x0000000000541e73 <+371>:   and    %rdi,%rbx
    At this point in execution, %rbx has a large and overflowed value, %rbx=0x3FFFFFFFFFFFFFFF. However, %rdi=0xc000000000000001. %rbx thus becomes
    1, which becomes the answer.

4.) The point of the -fsanitize=undefined flag is to have the compiler instill checks on various operations, to see if there would be undefined behavior.
    Since the flag -fwrapv was not put on, overflow due to multiplication would be considered such behavior. The trace would then have to deal with some
    jumps, because the compiler puts these jo conditional jumps, which jumps to some code if there is an overflow. This would mean some more code to trace,
    though not too much since the assignment requirements did not ask us to trace functions other than Ftimes and arith_driver, so we wouldn't need to deal
    with any calls that -fsanitize=undefined ends up putting in the assembly. An overflow error would also print out, so the output would indeed be different.

5.) -fwrapv would not cause issues. When the imul rdx is executed, we have a result stored in rdx:rax. At worst, i.e. LONG_MAX * LONG_MAX, we will have the 64
    bit result stored in the lower register be only 1. I have tested this with -fwrapv and without, and it is the same result. Emacs converts to unsigned
    anyway and -fwrapv only applies to signed arithmetic.

6.) If -fwrapv is specified, emacs can do less work when checking for overflow, since it does this after almost every operation. Thus emacs should use the benefit
of -fwrapv doing that work, letting things be more efficient and run faster.

7.) There are different ways to think about this. In reality, computers are so fast today that when doing these computations with a low magnitude of computation requests,
   there is nothing that significant in doing one way or the other. However if there are an immense amount of computational requests, there may be a time bump in which executes
   faster. After all, checking for overflow manually is an expensive process, and it can in a large case be too expensive.