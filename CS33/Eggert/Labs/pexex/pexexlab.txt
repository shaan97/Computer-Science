Began the lab extremely confused due to lack of clear directions on what exactly the project was, what a trace is, how to use GDB, and pretty much most components of the project.

========================================================================================================================================================================================================================

TRACE

After extensive research and hours of shooting in the dark, finally figured out what the project was asking and am currently looking to figure out how to get the trace with the least amount of work
possible, probably via "scripting" as the Piazza page talks about.
However, I'm unable to find any resources online that will give a sufficient crash course on the ins and outs of scripting. What I did eventually figure out was how to input gdb commands and get the
resulting execution to print to file:

	gdb ~eggert/bin64/bin/emacs-24.5 < input > output.txt

I could edit the input and output using commmands

	emacs input
	emacs output.txt

The content of what to put in input was a challenge, considering I have no idea what scripting really is and the instructions are extremely vague and insufficient. Brute forcing the trace seems like an
annoying, tiresome, and trivial idea, though, so I am looking for ways around that.


After trying lots of possible input files, what I've had to end up doing several things to get the information I need to at least build the first two columns of the trace.

Before scripting, I execute 

	(gdb) disas

when at the breakpoint for Ftimes and arith_driver respectively. I've copied the text that was outputted and pasted it into a text file. This will at least be a starting point for the trace, but with the disadvantage
of only showing the assembly, not necessarily in order of execution as the trace (I BELIEVE) wants. Again, still confused on what the specs are asking for.
On NotePad, I execute ctrl+h and change all the : to data.c:, since that will cover most of the lines. Not every line is like this, so if I notice it differs, I will change it.

LINE NUMBERS

I want to put line numbers on the assembly, but going one by one is extremely trivial and is something that should be automated. Again, I do not understand scripting, but I do know a sufficient amount of C++ to solve
this problem.

There are multiple ways of asking gdb for the line number, some better than others. Usually there is a pattern to the output, but one issue is that sometimes there is a sense of randomness or it doesn't give me information
I need. For instance, the command

	ni

is supposed to go to the next line in the assembly, as well as outputting some information on where the instruction pointer is now. And sometimes it will output information in a way I like:

	0x0000000000542146      2768      return arith_driver (Amult, nargs, args);

and other times in a way I don't like, because it doesn't give the address of the instruction:

2768      return arith_driver (Amult, nargs, args);

I need the address of the instruction so I can locate it in the text file with the assembly (remember from earlier?) and then put the correct line number there. The second line is not of much use to me. It's possible
I could do something to figure it out, but the whole point of automating this is so I can save time rather than brute forcing this. Trying to figure out that second case would take too much time in my opinion.

I write the following script to get the output from gdb of all ni instructions in Ftimes and arith_driver (though I accidentally get too much information, the C++ algorithm will still work):

	b Ftimes
	r		//OH NO! In retrospect, I should have done "r -batch -eval '( print(* 1 2 3))'. But since this is only for line numbers, the algorithm works, though it has an unnecessary amount of information to work with

	set $temp = $pc
	while $pc != $temp + 11
	      echo \n
	      ni
      	end
	x/i $pc
	si		
	set $temp = $pc	
	echo \n	
	while $pc != $temp + 528
	      echo \n
	      ni
	      end

This gets me a whole lot of output on my output.txt. I transfer this to my own computer, and run two algorithms on it. The first preprocesses it and makes a file that is of the form
	[ADDRESS]	[LINE NUMBER]

Here is the C++ function:
	
void preprocess_2() {
	fstream find("C:\\Users\\Shaan\\Desktop\\Computer Science\\CS33\\Eggert\\Labs\\pexex\\line3.txt");	//I know this is bad form, but this is just a small algorithm for me, nothing I need to generalize
	ofstream out("C:\\Users\\Shaan\\Desktop\\Computer Science\\CS33\\Eggert\\Labs\\pexex\\line4.txt");	//Also, I'm trying to do this quickly. The idea is that this automation is supposed to be faster
	unordered_set<string> s;
	while (find) {
		string next, next2;
		find >> next;
		while (find && (next.size() < 3 || next[0] != '0' || next[1] != 'x' || next[2] != '0'))
			find >> next;
		if (!find)
			break;
		if (!s.insert(next).second)
			continue;
		find >> next2;
		if (next2[0] < '0' || next2[0] > '9')
			continue;
		out << next << " ";
		
		out << next2 << "\n";
	}
}

I then take that file, the assembly file, and create a new file with updated line numbers.
	
void process_2(fstream& find, fstream& assembly) {
	ofstream target("target.txt");
	map<long, pair<std::string, bool>> table;
	while (assembly) {
		long addr;
		assembly >> hex >> addr;
		std::stringstream stream;
		stream << std::hex << addr;

		string next = "0x" + stream.str();
		string next2;
		getline(assembly, next2);


		table.emplace(addr, make_pair(next + next2, false));
	}
	while (find) {
		long key;
		find >> hex >> key;
		int num;
		find >> dec >> num;

		auto itr = table.find(key);
		if ( itr != table.end() && !itr->second.second) {
			int i;
			for (i = 0; i < itr->second.first.size() && itr->second.first[i] != ':'; i++);
			string s;
			if (num)
				s = std::to_string(num);
			itr->second.first = itr->second.first.substr(0, i + 1) + s + itr->second.first.substr(i + 1, itr->second.first.size() - i);
			//cout << itr->second.first << endl;
			itr->second.second = true;
		}

	}

	for (auto itr = table.begin(); itr != table.end(); itr++) {
		target << itr->second.first << endl;
	}
}

But now, the file has only some of the line numbers. I did not process the ni output that wasn't of the form I liked. There is another command that can also give some information about line numbers
(but again, this has issues as well):

	(gdb) info line
	Line 2767 of "data.c" starts at address 0x542140 <Ftimes> and ends at 0x542143 <Ftimes+3>.

This is in a format that is useful, because it always prints out this way. 
	Line [NUMBER] of [FILE] starts at address [BEGINNING ADDRESS] [RELATIVE ADDRESS] and ends at [END ADDRESS] [RELATIVE ADDRESS]

However this also has a drawback. The address does not always match up with the assembly we have. The relative address is not always Ftimes or arith_driver, but sometimes is elsewhere. But if we use this
in tandem with the other information, we could get a solid amount of line numbers, and we can brute force the rest while creating column 3.

I use the following script:
	b Ftimes
	r		//Same concern, but it still works

	set $temp = $pc
	while $pc != $temp + 11
	      echo \n
	      ni
	      end
	x/i $pc
	si
	set $temp = $pc
	echo \n
	while $pc != $temp + 528
	      echo \n
	      ni
	      end

	
And then I have the same preprocess, process idea, except the code is dealing with a different format.

void preprocess() {
	fstream find("C:\\Users\\Shaan\\Desktop\\Computer Science\\CS33\\Eggert\\Labs\\pexex\\line.txt");
	ofstream out("C:\\Users\\Shaan\\Desktop\\Computer Science\\CS33\\Eggert\\Labs\\pexex\\line2.txt");
	unordered_set<long> nums;
	while (find) {
		string next;
		find >> next;
		while (find && next != "Line") {
			find >> next;
		}
		long num;
		find >> hex >> num;

		if (!nums.insert(num).second) {
			continue;
		}
		std::stringstream stream;
		stream << std::hex << num;
		out << next << " " << stream.str();

		while (find && next != "ends") {
			find >> next;
			out << " " << next << " ";
		}
		find >> next;
		out << " " << next << " ";
		find >> next;
		out << " " << next << " ";
		find >> next;
		out << " " << next << "\n";


	}
	find.close();
}

That function takes all the gdb output and just leaves the output from "info line."


void process(fstream& find, fstream& assembly) {
	ofstream target("target2.txt");
	map<long, pair<std::string, bool>> table;
	while (assembly) {
		long addr;
		assembly >> hex >> addr;
		std::stringstream stream;
		stream << std::hex << addr;

		string next = "0x" + stream.str();
		string next2;
		getline(assembly, next2);
		
		
		table.emplace(addr, make_pair(next + next2, false));
	}
	//int count = 0;
	while (find) {
		string next;
		find >> next;

		while (find && next != "Line") {
			find >> next;
		//	cout << next << endl;
		}
		long num;
		find >> dec >> num;
		//cout << "Line " << num << endl;

		while (find && next != "address")
			find >> next;
		long key;
		find >> hex >> key;
		//cout << "Key " << key << endl;

		while (find && next != "at")
			find >> next;
		long end;
		find >> hex >> end;
		//cout << "To " << end << endl;

		cout << "Inserting " << dec << num << " and Processing from " << hex << key << " to " << end << endl;
		for (auto itr = table.find(key); itr != table.end() && !itr->second.second && itr->first != end; itr++) {
			int i;
			for (i = 0; i < itr->second.first.size() && itr->second.first[i] != ':'; i++);
			string s;
			if (num)
				s = std::to_string(num);
			itr->second.first = itr->second.first.substr(0, i + 1) + s + itr->second.first.substr(i + 1, itr->second.first.size() - i);
			cout << itr->second.first << endl;
			itr->second.second = true;
		}
		
	}
	
	for (auto itr = table.begin(); itr != table.end(); itr++) {
		target << itr->second.first << endl;
	}
	
}

And now we have a lot of the line numbers in! Boy that was a lot of work. If only we had been taught better scripting methodology in lecture...
Anyway! Now we move onto bigger problems.

THIRD COLUMN
	We COULD write an algorithm that in principle does the same as above: processes a bunch of output and modifies our existing file accordingly. However, I am no longer in the mood to try and automate,
	and the output might take too long to figure out how to parse. It is now that we use brute force. :/

	My basic process is as follows:
		Execute the line using : ni
		Execute: info registers
		Look at the corresponding line in assembly code, and see what registers should be modified
		Examing those registers that were printed out using info registers, and type out what changed at that particular line
		Rinse and repeat

	I used that to fill out the third column using the formatting requirements specified.

And that's trace.tr!


========================================================================================================================================================================================================================

INTEGER OVERFLOW HANDLING

	The compilation part for this aspect of the lab was fairly straightforward. I created three seperate files using gcc commands similar to this

		gcc -O2 -S filename
		gcc -O2 -fsanitize=undefined -S filename
		gcc -O2 -fwrapv -S filename

	This created three seperate assembly files, which I have inserted into the testovf.txt file and have gone into depth over. Nothing too complicated here, other than reading these
	files and analyzing their differences (again, see testovf.txt).

========================================================================================================================================================================================================================

ANSWERS	

	The answers to the questions have been included in the answers.txt file. I also used gdb to walk through the code whenever I was unsure of the answer, and also used my trace.tr for reference.