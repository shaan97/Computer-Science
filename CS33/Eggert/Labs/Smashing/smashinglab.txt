SMASHING LAB - SHAAN MATHUR - ID:904606576

====================================================================================================================
SET-UP
====================================================================================================================
We begin the lab by checking that gcc is at the start of our path using the command:

	which gcc

Which does in fact output

	/usr/loal/cs/bin/gcc

We then go to the file thttpd.c and make the following changes:
	1. Change "char line[10000]" to "char line[100]"
	2. Change "while ( fgets ( line, sizeof(line), fp) != (char*) 0)" to
		   while ( fgets ( line, 100, fp) != (char*) 0)"

and then configure it with the shell command:
	./configure \LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

Finally we compile three different times into two different files:
	
	1. (SP) for strong stack protection
	2. (AS) for address sanitization
	3. (NO) for neither
To do this in one stroke, I created the file compile.sh, which featured the following:

	#!/bin/sh
	./configure \
	    CFLAGS='-m32' \
	    LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

	make clean
	make CFLAGS='-S -O2 -fno-inline -fstack-protector-strong'
	mv src/thttpd.s src/thttpd-sp.s

	make clean
	make CFLAGS='-S  -O2 -fno-inline -fsanitize=address'
	mv src/thttpd.s src/thttpd-as.s

	make clean
	make CFLAGS='-S -O2 -fno-inline -fno-stack-protector -zexecstack'
	mv src/thttpd.s src/thttpd-no.s

This was executed using
	chmod +777 compile.sh
	./compile.sh

Now that everything is set up, we can begin with the project.

====================================================================================================================
INVOKING CRASHES
====================================================================================================================

I used the same file to crash all of the variations of the compiled C code. I have not attached it because it is a trivial crash: I pressed and held the tab key and let it place tabs in the text file
for well over 200 lines. I describe the impact of this file on the variations. Note that there was no specific machine instruction that these crashed because of. If one must try to answer the question, 
it is the cause of failed returns (thus the instruction being ret).


SP Crash

The -fstack-protector-strong compiled file featured canaries around the return address to detect for stack buffer overflow attacks.
(Note that it turns out, as seen in #8, that this really didn't change anything for this particular function since the compiler
believed it was not a function that needed a canary). When inserting the file with the tabs, this wrote for around 200 bytes
just the byte values 0x09 repeatedly. There was no intelligence in this approach, but was just a way of trying to destroy the program
and make it fail. It resulted in a segmentation fault.

The Backtrace:

#0  uw_frame_state_for (context=context@entry=0xffffb950, fs=fs@entry=0xffffb9d0) at ../../../../gcc-6.2.0/libgcc/unwind-dw2.c:1249
#1  0xf7fd13f8 in _Unwind_Backtrace (trace=0xf7eccc80 <backtrace_helper>, trace_argument=0xffffbacc) at ../../../../gcc-6.2.0/libgcc/unwind.inc:290
#2  0xf7eccd75 in backtrace () from /lib/libc.so.6
#3  0xf7e2ea71 in __libc_message () from /lib/libc.so.6
#4  0xf7ed02d5 in __fortify_fail () from /lib/libc.so.6
#5  0xf7ed028a in __stack_chk_fail () from /lib/libc.so.6
#6  0x0804c36e in read_config (filename=<optimized out>) at thttpd.c:1190
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x09090909 in ?? ()
#44 0x09090909 in ?? ()
#45 0x09090909 in ?? ()
#46 0x09090909 in ?? ()
#47 0x09090909 in ?? ()
#48 0x09090909 in ?? ()
#49 0x0000000a in ?? ()
#50 0x00000000 in ?? ()


The failure was caught after execution of read_config(...), calling functions like __stack_chk_fail (),
__fortify_fail(),  and __libc_message(). Interestingly, the backtrace has a lot of 0x09090909 functions,
which is a consequence of the buffer overflow. It changed the return addresses on the stack and the backtrace
believes those to be the called functions.


AS Crash

The -fsanitize=address compiled version of the C code had mini buffers placed around variables to detect for overwriting.
Using the same text file as earlier, the tab byte sequence 0x09 was placed for around 200 bytes, wiping out return addresses,
and likely "poisoning" some values, causing the program to realize it was being tampered with.

The Backtrace:

#0  uw_frame_state_for (context=context@entry=0xffffb4a0, fs=fs@entry=0xffffb520) at ../../../../gcc-6.2.0/libgcc/unwind-dw2.c:1249
#1  0xf764f3f8 in _Unwind_Backtrace (trace=0xf7b30330 <__sanitizer::Unwind_Trace(_Unwind_Context*, void*)>, trace_argument=0xffffb618) at ../../../../gcc-6.2.0/libgcc/unwind.inc:290
#2  0xf7b3044b in __sanitizer::BufferedStackTrace::SlowUnwindStack (this=0xffffb730, pc=4155069886, max_depth=256)
    at ../../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:113
#3  0xf7b2adb6 in __sanitizer::BufferedStackTrace::Unwind (this=0xffffb730, max_depth=256, pc=4155069886, bp=4294950856, context=0x0, stack_top=4294959104, stack_bottom=4286570496,
    request_fast_unwind=false) at ../../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_stacktrace_libcdep.cc:65
#4  0xf7b13edb in __asan::GetStackTraceWithPcBpAndContext (fast=false, context=0x0, bp=4294950856, pc=4155069886, max_depth=256, stack=0xffffb730)
    at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_stack.h:49
#5  __asan::ReportGenericError (pc=<optimized out>, bp=<optimized out>, sp=<optimized out>, addr=<optimized out>, is_write=<optimized out>, access_size=<optimized out>,
    exp=<optimized out>, fatal=<optimized out>) at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_report.cc:1092
#6  0xf7a955d3 in __interceptor_strchr (str=<optimized out>, c=<optimized out>) at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_interceptors.cc:468
#7  0x0804eb77 in read_config (filename=<optimized out>) at thttpd.c:1018
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x0000000a in ?? ()
#37 0x00000000 in ?? ()

As you can see, we have a similar structure for the error sequence as the SP Crash. Here the program also crashed after the function was terminated,
likely because the fsanitize thought memory was poisoned. There was a sequence of consequent calls to handle it, involving functions such as
__interceptor_strchr(...) and __asan::ReportGenericError(...). This backtrace also has many 0x09090909 locations for the functions, also a consequence
of overwriting the return addresses with the tab characters.


NO Crash

Finally, we apply the same text file to the file that was compiled without protection. We expect this one to be the most vulnerable, being unable to
fend off this attack with any of the function calls the other programs could.

The Backtrace:

#0  0x09090909 in ?? ()
#1  0x09090909 in ?? ()
#2  0x09090909 in ?? ()
#3  0x09090909 in ?? ()
#4  0x09090909 in ?? ()
#5  0x09090909 in ?? ()
#6  0x09090909 in ?? ()
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x0000000a in ?? ()
#44 0x00000000 in ?? ()

As expected, there were no functions being called by a security system detecting the attack. Instead, after the termination
of the function read_config(...), the function keeps trying to return to a function at address 0x09090909, and does so
for about 44 function calls. It is only then that the system recognizes there is a segmentation fault, with the last
function trying to address a function at 0x00000000, which is something never accessible. 
#0  0x09090909 in ?? ()
#1  0x09090909 in ?? ()
#2  0x09090909 in ?? ()
#3  0x09090909 in ?? ()
#4  0x09090909 in ?? ()
#5  0x09090909 in ?? ()
#6  0x09090909 in ?? ()
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x0000000a in ?? ()
#44 0x00000000 in ?? ()

I used the same file to crash all of the variations of the compiled C code. I have not attached it because it is a trivial crash: I pressed and held the tab key and let it place tabs in the text file
for well over 200 lines. I describe the impact of this file on the variations. Note that there was no specific machine instruction that these crashed because of. If one must try to answer the question, 
it is the cause of failed returns (thus the instruction being ret).


SP Crash

The -fstack-protector-strong compiled file featured canaries around the return address to detect for stack buffer overflow attacks.
(Note that it turns out, as seen in #8, that this really didn't change anything for this particular function since the compiler
believed it was not a function that needed a canary). When inserting the file with the tabs, this wrote for around 200 bytes
just the byte values 0x09 repeatedly. There was no intelligence in this approach, but was just a way of trying to destroy the program
and make it fail. It resulted in a segmentation fault.

The Backtrace:

#0  uw_frame_state_for (context=context@entry=0xffffb950, fs=fs@entry=0xffffb9d0) at ../../../../gcc-6.2.0/libgcc/unwind-dw2.c:1249
#1  0xf7fd13f8 in _Unwind_Backtrace (trace=0xf7eccc80 <backtrace_helper>, trace_argument=0xffffbacc) at ../../../../gcc-6.2.0/libgcc/unwind.inc:290
#2  0xf7eccd75 in backtrace () from /lib/libc.so.6
#3  0xf7e2ea71 in __libc_message () from /lib/libc.so.6
#4  0xf7ed02d5 in __fortify_fail () from /lib/libc.so.6
#5  0xf7ed028a in __stack_chk_fail () from /lib/libc.so.6
#6  0x0804c36e in read_config (filename=<optimized out>) at thttpd.c:1190
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x09090909 in ?? ()
#44 0x09090909 in ?? ()
#45 0x09090909 in ?? ()
#46 0x09090909 in ?? ()
#47 0x09090909 in ?? ()
#48 0x09090909 in ?? ()
#49 0x0000000a in ?? ()
#50 0x00000000 in ?? ()


The failure was caught after execution of read_config(...), calling functions like __stack_chk_fail (),
__fortify_fail(),  and __libc_message(). Interestingly, the backtrace has a lot of 0x09090909 functions,
which is a consequence of the buffer overflow. It changed the return addresses on the stack and the backtrace
believes those to be the called functions.


AS Crash

The -fsanitize=address compiled version of the C code had mini buffers placed around variables to detect for overwriting.
Using the same text file as earlier, the tab byte sequence 0x09 was placed for around 200 bytes, wiping out return addresses,
and likely "poisoning" some values, causing the program to realize it was being tampered with.

The Backtrace:

#0  uw_frame_state_for (context=context@entry=0xffffb4a0, fs=fs@entry=0xffffb520) at ../../../../gcc-6.2.0/libgcc/unwind-dw2.c:1249
#1  0xf764f3f8 in _Unwind_Backtrace (trace=0xf7b30330 <__sanitizer::Unwind_Trace(_Unwind_Context*, void*)>, trace_argument=0xffffb618) at ../../../../gcc-6.2.0/libgcc/unwind.inc:290
#2  0xf7b3044b in __sanitizer::BufferedStackTrace::SlowUnwindStack (this=0xffffb730, pc=4155069886, max_depth=256)
    at ../../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:113
#3  0xf7b2adb6 in __sanitizer::BufferedStackTrace::Unwind (this=0xffffb730, max_depth=256, pc=4155069886, bp=4294950856, context=0x0, stack_top=4294959104, stack_bottom=4286570496,
    request_fast_unwind=false) at ../../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_stacktrace_libcdep.cc:65
#4  0xf7b13edb in __asan::GetStackTraceWithPcBpAndContext (fast=false, context=0x0, bp=4294950856, pc=4155069886, max_depth=256, stack=0xffffb730)
    at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_stack.h:49
#5  __asan::ReportGenericError (pc=<optimized out>, bp=<optimized out>, sp=<optimized out>, addr=<optimized out>, is_write=<optimized out>, access_size=<optimized out>,
    exp=<optimized out>, fatal=<optimized out>) at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_report.cc:1092
#6  0xf7a955d3 in __interceptor_strchr (str=<optimized out>, c=<optimized out>) at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_interceptors.cc:468
#7  0x0804eb77 in read_config (filename=<optimized out>) at thttpd.c:1018
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x0000000a in ?? ()
#37 0x00000000 in ?? ()

As you can see, we have a similar structure for the error sequence as the SP Crash. Here the program also crashed after the function was terminated,
likely because the fsanitize thought memory was poisoned. There was a sequence of consequent calls to handle it, involving functions such as
__interceptor_strchr(...) and __asan::ReportGenericError(...). This backtrace also has many 0x09090909 locations for the functions, also a consequence
of overwriting the return addresses with the tab characters.


NO Crash

Finally, we apply the same text file to the file that was compiled without protection. We expect this one to be the most vulnerable, being unable to
fend off this attack with any of the function calls the other programs could.

The Backtrace:

#0  0x09090909 in ?? ()
#1  0x09090909 in ?? ()
#2  0x09090909 in ?? ()
#3  0x09090909 in ?? ()
#4  0x09090909 in ?? ()
#5  0x09090909 in ?? ()
#6  0x09090909 in ?? ()
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x0000000a in ?? ()
#44 0x00000000 in ?? ()

As expected, there were no functions being called by a security system detecting the attack. Instead, after the termination
of the function read_config(...), the function keeps trying to return to a function at address 0x09090909, and does so
for about 44 function calls. It is only then that the system recognizes there is a segmentation fault, with the last
function trying to address a function at 0x00000000, which is something never accessible. 

====================================================================================================================
ASSEMBLY IMPLEMENTATIONS
====================================================================================================================

-sp

The -fstack-protector family of flags is purposed for using canaries to test for stack buffer overflow, guarding against stack buffer overflow attacks. Particularly, an extra buffer of bytes is placed between
the main data in a function stack and the return address. If the buffer overflows, it will change the state of the canaries before altering the return address. The code checks to see if the canaries have been affected
upon a functions termination. If the canary has not been altered, it is (presumably) safe to return. If it has, however, the program fails and exits.

The -fstack-protector-strong flag is a newer flag in the family of flags. This flag does not add canaries too all functions arbitrarily, since canaries do have the cost of requiring more memory and some more runtime checking
to see if it is intact. Instead, canaries are only added to functions that include arrays that are a minimum of 8 bytes long. Arrays are a primary way to overrun the stack since array indexing can lead to reading and writing
to unintended parts of memory.

In the thttpd-sp.s file, which was compiled with the -fstack-protector-strong, canaries were NOT added to the handle_read function. The function has virtually identical assembly as the thttpd-no.s file, which
was compiled without a -fno-stack-protector. This is because handle_read does not have any arrays of larger than or equal to 8 bytes long.

-as

Upon memory allocation, a program compiled with -fsanitize=address will put a buffer around it. Whenever the program accesses memory, it checks to see if the memory has been corrupted by looking at these poisoned zones;
if it notices that it is corrupted, then it terminates. It is almost like having canaries for variables.

As an example, take an excerpt from the handle_read thttpd-as.s, which was compiled with -fsanitize=address:

	movq	%rdi, %rax
	shrq	$3, %rax
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	cmpb	$0, 2147450880(%rax)
	jne	.L1175
	movq	8(%rbp), %rbx
	leaq	160(%rbx), %r13
	movq	%r13, %r15
	shrq	$3, %r15
	cmpb	$0, 2147450880(%r15)

We have a seemingly strange instruction which compares 2147450880(%rax) with 0, If the result of that comparison is that they are not equal, the code jumps to .L1175:

.L1175:
	call	__asan_report_load8

Which reports the overflow. Performing these checks allows the programs stack to be safe from buffer overflow, since there are many checks to see if the memory is not poisoned. 

====================================================================================================================
EXPLOITING THE NO VARIANT
====================================================================================================================
To exploit the code to make it delete a file, my method of choice was to use the 

	int unlink(const *char pathname);


function in the header file <unistd.h>. Luckily, the source code already includes this file, so getting the address for this program was a matter of going to gdb
and entering the command

	(gdb) disas unlink.

This output the following:

Dump of assembler code for function unlink:
   0xf7ea8170 <+0>:     mov    %ebx,%edx
   0xf7ea8172 <+2>:     mov    0x4(%esp),%ebx
   0xf7ea8176 <+6>:     mov    $0xa,%eax
   0xf7ea817b <+11>:    call   *%gs:0x10
   0xf7ea8182 <+18>:    mov    %edx,%ebx
   0xf7ea8184 <+20>:    cmp    $0xfffff001,%eax
   0xf7ea8189 <+25>:    jae    0xf7ea818c <unlink+28>
   0xf7ea818b <+27>:    ret
   0xf7ea818c <+28>:    call   0xf7ef7779 <__x86.get_pc_thunk.cx>
   0xf7ea8191 <+33>:    add    $0xd1e6f,%ecx
   0xf7ea8197 <+39>:    mov    -0xe8(%ecx),%ecx
   0xf7ea819d <+45>:    neg    %eax
   0xf7ea819f <+47>:    mov    %eax,%gs:(%ecx)
   0xf7ea81a2 <+50>:    or     $0xffffffff,%eax
   0xf7ea81a5 <+53>:    ret
End of assembler dump.

So the address of interest is 0xf7ea8170. Now our objective is to use the fact that the read_config(...) function in the source code has a bug that allows us to submit a .txt
file via the -C flag which can overwrite memory in the stack, causing a stack buffer overflow. We can use this to overwrite the stack's contents in a clever way so that we can
overwrite the return address to this unlink function. This way we can return to it after the read_config(...) function completion. However, there is a caveat.

One issue in using the unlink(const *char pathname) function is that it requires an argument. If we are working with x86-64, we aim to change the %rdi register, which is the
default first argument. However, the compilation specified in this project included the -m32 flag, which resulted in assembly using x86 convention. The convention for passing
arguments there is to push it onto the stack. Thus we have to determine where exactly on the stack to store our pointer. This leads to the next issue! We have to store an address
to a null-terminated C-string as our argument, meaning I need a safe location to place a C-string and I need to determine it's address in memory.

So with all this being said, I created the file attack.txt, which contains the exploit. I have attached it in this project. It begins with a valid command from the read_config
function "path=...". If this was not included, then the function would just exit using exit(0) since it could not process the command. The function had to be tricked into believing
it was processing a valid command. It was only necessary to say "path=" once to avoid the immediate program termination threatened by the function. After that, particular character
values were placed strategically in the text file. For instance, the string "target.txt" was placed in there, along with the addresses, written byte-for-byte in ASCII form. This was
one of the most challenging parts of constructing the file, since Emacs had very difficult documentation to follow in terms of determining how to properly enter extended ASCII values
into the file. For instance, how does one insert a NULL character (0x00)? After repeatedly trying to copy paste characters without success, I realized Emacs has a setting called
multi-byte, which allows Emacs to represent particular unique characters outside of ASCII by using more than one byte. The solution I eventually came up with was to try and change
this to unibyte mode (regular one byte per character) and then set the encoding to unix. This seemed to do the trick when trying to insert some character values. Copy pasting still
was not completely effective, so after some research I discovered that one could using the following command,

	printf '\x00' >> attack.txt

to append to a file the character with that particular ASCII value (in this case, the null byte). I could then just move this character to the appropriate location in the file. I ended
up using this strategy for all bytes whose ASCII representation was not on the keyboard.

Another issue I ran into was where to store my C-String. For a while I would use GDB to check the address location to see if the C-string was being read correctly. It would always say
"target.txt", but then the unlink function would return -1, indicating failure (and the file was not deleted). What I eventually discovered was that other function calls were being made
in unlink, and those function calls were overwriting my C-String, which was placed in an inappropriate location. I placed the C-string farther away, and it began to work correctly.

