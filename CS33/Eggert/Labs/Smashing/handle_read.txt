-sp

The -fstack-protector family of flags is purposed for using canaries to test for stack buffer overflow, guarding against stack buffer overflow attacks. Particularly, an extra buffer of bytes is placed between
the main data in a function stack and the return address. If the buffer overflows, it will change the state of the canaries before altering the return address. The code checks to see if the canaries have been affected
upon a functions termination. If the canary has not been altered, it is (presumably) safe to return. If it has, however, the program fails and exits.

The -fstack-protector-strong flag is a newer flag in the family of flags. This flag does not add canaries too all functions arbitrarily, since canaries do have the cost of requiring more memory and some more runtime checking
to see if it is intact. Instead, canaries are only added to functions that include arrays that are a minimum of 8 bytes long. Arrays are a primary way to overrun the stack since array indexing can lead to reading and writing
to unintended parts of memory.

In the thttpd-sp.s file, which was compiled with the -fstack-protector-strong, canaries were NOT added to the handle_read function. The function has virtually identical assembly as the thttpd-no.s file, which
was compiled without a -fno-stack-protector. This is because handle_read does not have any arrays of larger than or equal to 8 bytes long.

-as

Upon memory allocation, a program compiled with -fsanitize=address will put a buffer around it. Whenever the program accesses memory, it checks to see if the memory has been corrupted by looking at these poisoned zones;
if it notices that it is corrupted, then it terminates. It is almost like having canaries for variables.

As an example, take an excerpt from the handle_read thttpd-as.s, which was compiled with -fsanitize=address:

	movq	%rdi, %rax
	shrq	$3, %rax
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	cmpb	$0, 2147450880(%rax)
	jne	.L1175
	movq	8(%rbp), %rbx
	leaq	160(%rbx), %r13
	movq	%r13, %r15
	shrq	$3, %r15
	cmpb	$0, 2147450880(%r15)

We have a seemingly strange instruction which compares 2147450880(%rax) with 0, If the result of that comparison is that they are not equal, the code jumps to .L1175:

.L1175:
	call	__asan_report_load8

Which reports the overflow. Performing these checks allows the programs stack to be safe from buffer overflow, since there are many checks to see if the memory is not poisoned. 