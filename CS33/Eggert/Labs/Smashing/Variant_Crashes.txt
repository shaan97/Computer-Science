I used the same file to crash all of the variations of the compiled C code. I have not attached it because it is a trivial crash: I pressed and held the tab key and let it place tabs in the text file
for well over 200 lines. I describe the impact of this file on the variations. Note that there was no specific machine instruction that these crashed because of. If one must try to answer the question, 
it is the cause of failed returns (thus the instruction being ret).


SP Crash

The -fstack-protector-strong compiled file featured canaries around the return address to detect for stack buffer overflow attacks.
(Note that it turns out, as seen in #8, that this really didn't change anything for this particular function since the compiler
believed it was not a function that needed a canary). When inserting the file with the tabs, this wrote for around 200 bytes
just the byte values 0x09 repeatedly. There was no intelligence in this approach, but was just a way of trying to destroy the program
and make it fail. It resulted in a segmentation fault.

The Backtrace:

#0  uw_frame_state_for (context=context@entry=0xffffb950, fs=fs@entry=0xffffb9d0) at ../../../../gcc-6.2.0/libgcc/unwind-dw2.c:1249
#1  0xf7fd13f8 in _Unwind_Backtrace (trace=0xf7eccc80 <backtrace_helper>, trace_argument=0xffffbacc) at ../../../../gcc-6.2.0/libgcc/unwind.inc:290
#2  0xf7eccd75 in backtrace () from /lib/libc.so.6
#3  0xf7e2ea71 in __libc_message () from /lib/libc.so.6
#4  0xf7ed02d5 in __fortify_fail () from /lib/libc.so.6
#5  0xf7ed028a in __stack_chk_fail () from /lib/libc.so.6
#6  0x0804c36e in read_config (filename=<optimized out>) at thttpd.c:1190
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x09090909 in ?? ()
#44 0x09090909 in ?? ()
#45 0x09090909 in ?? ()
#46 0x09090909 in ?? ()
#47 0x09090909 in ?? ()
#48 0x09090909 in ?? ()
#49 0x0000000a in ?? ()
#50 0x00000000 in ?? ()


The failure was caught after execution of read_config(...), calling functions like __stack_chk_fail (),
__fortify_fail(),  and __libc_message(). Interestingly, the backtrace has a lot of 0x09090909 functions,
which is a consequence of the buffer overflow. It changed the return addresses on the stack and the backtrace
believes those to be the called functions.


AS Crash

The -fsanitize=address compiled version of the C code had mini buffers placed around variables to detect for overwriting.
Using the same text file as earlier, the tab byte sequence 0x09 was placed for around 200 bytes, wiping out return addresses,
and likely "poisoning" some values, causing the program to realize it was being tampered with.

The Backtrace:

#0  uw_frame_state_for (context=context@entry=0xffffb4a0, fs=fs@entry=0xffffb520) at ../../../../gcc-6.2.0/libgcc/unwind-dw2.c:1249
#1  0xf764f3f8 in _Unwind_Backtrace (trace=0xf7b30330 <__sanitizer::Unwind_Trace(_Unwind_Context*, void*)>, trace_argument=0xffffb618) at ../../../../gcc-6.2.0/libgcc/unwind.inc:290
#2  0xf7b3044b in __sanitizer::BufferedStackTrace::SlowUnwindStack (this=0xffffb730, pc=4155069886, max_depth=256)
    at ../../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:113
#3  0xf7b2adb6 in __sanitizer::BufferedStackTrace::Unwind (this=0xffffb730, max_depth=256, pc=4155069886, bp=4294950856, context=0x0, stack_top=4294959104, stack_bottom=4286570496,
    request_fast_unwind=false) at ../../../../../gcc-6.2.0/libsanitizer/sanitizer_common/sanitizer_stacktrace_libcdep.cc:65
#4  0xf7b13edb in __asan::GetStackTraceWithPcBpAndContext (fast=false, context=0x0, bp=4294950856, pc=4155069886, max_depth=256, stack=0xffffb730)
    at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_stack.h:49
#5  __asan::ReportGenericError (pc=<optimized out>, bp=<optimized out>, sp=<optimized out>, addr=<optimized out>, is_write=<optimized out>, access_size=<optimized out>,
    exp=<optimized out>, fatal=<optimized out>) at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_report.cc:1092
#6  0xf7a955d3 in __interceptor_strchr (str=<optimized out>, c=<optimized out>) at ../../../../../gcc-6.2.0/libsanitizer/asan/asan_interceptors.cc:468
#7  0x0804eb77 in read_config (filename=<optimized out>) at thttpd.c:1018
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x0000000a in ?? ()
#37 0x00000000 in ?? ()

As you can see, we have a similar structure for the error sequence as the SP Crash. Here the program also crashed after the function was terminated,
likely because the fsanitize thought memory was poisoned. There was a sequence of consequent calls to handle it, involving functions such as
__interceptor_strchr(...) and __asan::ReportGenericError(...). This backtrace also has many 0x09090909 locations for the functions, also a consequence
of overwriting the return addresses with the tab characters.


NO Crash

Finally, we apply the same text file to the file that was compiled without protection. We expect this one to be the most vulnerable, being unable to
fend off this attack with any of the function calls the other programs could.

The Backtrace:

#0  0x09090909 in ?? ()
#1  0x09090909 in ?? ()
#2  0x09090909 in ?? ()
#3  0x09090909 in ?? ()
#4  0x09090909 in ?? ()
#5  0x09090909 in ?? ()
#6  0x09090909 in ?? ()
#7  0x09090909 in ?? ()
#8  0x09090909 in ?? ()
#9  0x09090909 in ?? ()
#10 0x09090909 in ?? ()
#11 0x09090909 in ?? ()
#12 0x09090909 in ?? ()
#13 0x09090909 in ?? ()
#14 0x09090909 in ?? ()
#15 0x09090909 in ?? ()
#16 0x09090909 in ?? ()
#17 0x09090909 in ?? ()
#18 0x09090909 in ?? ()
#19 0x09090909 in ?? ()
#20 0x09090909 in ?? ()
#21 0x09090909 in ?? ()
#22 0x09090909 in ?? ()
#23 0x09090909 in ?? ()
#24 0x09090909 in ?? ()
#25 0x09090909 in ?? ()
#26 0x09090909 in ?? ()
#27 0x09090909 in ?? ()
#28 0x09090909 in ?? ()
#29 0x09090909 in ?? ()
#30 0x09090909 in ?? ()
#31 0x09090909 in ?? ()
#32 0x09090909 in ?? ()
#33 0x09090909 in ?? ()
#34 0x09090909 in ?? ()
#35 0x09090909 in ?? ()
#36 0x09090909 in ?? ()
#37 0x09090909 in ?? ()
#38 0x09090909 in ?? ()
#39 0x09090909 in ?? ()
#40 0x09090909 in ?? ()
#41 0x09090909 in ?? ()
#42 0x09090909 in ?? ()
#43 0x0000000a in ?? ()
#44 0x00000000 in ?? ()

As expected, there were no functions being called by a security system detecting the attack. Instead, after the termination
of the function read_config(...), the function keeps trying to return to a function at address 0x09090909, and does so
for about 44 function calls. It is only then that the system recognizes there is a segmentation fault, with the last
function trying to address a function at 0x00000000, which is something never accessible. 