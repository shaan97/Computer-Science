Ch 2: Basic Data Concepts

Data Types
	A name for a category of data values that are all related

A decision was made early in Java development to support two different kinds of data:
	Primitive Types and Objects

Primitive Types
	int - integers
		42,-3,15 20493, 0
	double (floating points) - Real numbers
		7.35, 14.9, -19, .83423
	char - single characters
		'a', 'x', '!'
	boolean - logical values
		true, false

Expression
	A simple value or set of operations that produces a value

	Exp) (2*6) + (4*3) + 2

Evaluation
	The process of obtaining the value of an expression

Complex Expressions are formed using operators

Operator
	A specific symbol (like + or *) that is used to indicate an operation to
	be performed on one or more values
	
	3 * 4 
	3= operand
	*= operator
	4= operand
Exp)	System.out.println(42) //42
	System.out.println(2+2) //4

Literals
	The simplest expressions which refer to values directly using what are known as literals

Integer Literals
	3	482	-29343	0	+9812

Floating-Point literals (doubles)
	14.0	248.4	0.284	207. -.98
	Literals of type double can also be expressed in scientific notation
		2.3e4	3e-5	3.8e98

Character Literals
	'a'	'm'	'\\'	'\''

Boolean Literals
	true, false

Note
	Remember back in chapter 1 we saw what a string literal was. Please note that
	a string or string literal is not a Java Primitive type. In Java, strings are objects.
	
	Therefore, remember that is Java there are only 4 primitive types

Arithmetic Operators in Java
	+	Add
	-	Subtract
	*	Multiply
	/	Divide
	%	Mod (remainder)

119/5 in Java is 23
119%5 in Java is 4
7/10 in Java is 0

Mixing Types and Casting
	You will often find yourself mixing values of different types and wanting to convert from
	one type to another
	
	Types that are frequently mixed are doubles and integers.

	When mixing ints and doubles, Java always converts ints to doubles
	Ex. 2*3.6 = 2.0 *3.6 =7.2

	Remember that for division, if the two opperands are ints, Java will use integer (truncating)
	divison	
	23/5 = 4
	
	But,
	23.0/4 = 5.75
	23./4 = 5.75
	23/4. = 5.75
	etc

Casting
	Sometimes you want to connect a double to an int. You can do this conversion with a cast

	ex. (int) 4.75 => 4

Mixing Strings with Numbers
	If you add a number to a string or vice versa, the number gets turned into a string
	ex. System.out.println(5 + "Hello")

	5 gets connected into "5" and then is glued with Hello to form "5Hello"

Variables
	A memory location with a name and a type that stores a value
	
	<type><name>;
	ex. 
	int age;
	double height;
	char symbol;
	boolean won;
	string name;
		or
	int age = 25;
	etc
		or
	int age;
	age = 25
		or
	double height=70, weight=190, bmi;

What does this do?
	int x=(y=(z=2*5+4));
	Note: String is an object, not a primitive type

Increment/Decrement Operators
	x=x+1; same as x+=1
	y=y-2; same as y-=2
	z=z*3; same as z*=3
	Ex.
	int x=15
	x+=10
	System.out.print(x); //25

Now let's look at an even more compact Increment/Decrement Operators
	x=x+1 => x++
	x=x-1 => x--
	
	Post Increment
		x++
		x--
	Pre Increment
		++x
		--x
	Difference in these two examples (Pre/Post) appear in more complex expressions
	Ex.
		int x=5;
		System.out.print(x++); //5
		System.out.print(x); //6
	Ex.
		int x=7;
		System.out.print(++x); //8
		System.out.print(x); //8
	This is the same for --, but it subtracts instead of adding.

Remember from Yesterday
	Exp
	int x = 10;
	int y = 10;
	int z = ++x * y--;
	System.out.print(z); //220

Variables and Missing Types
	Exp) 
	int x;
	double y;
	x=z+3; //ok
	y=3.4+2.9; //ok
	
	y=z+3; //ok
	x=3.4+2.9; //Not okay
	You cannot assign a double value to an integer variable. You can, however,
	assign an integer to a double, since all integers are real numbers.
	Exp)
	x= (int)(3.4+2.9); //Now okay, and x=16
	
We often write programs that involve a mixture of ints and doubles, so its easy to make mistakes
	Exp)
	int totalQuestons;
	int numRight;
	double percent;
percent = numRight/totalQuestions *100

if numRight is 17 out of 35 questions, 17/35 = 0. Couple options.

The for Loop
	Control Structure
		A syntactic structure that controls other statements.
		
	Some of the control structures used in Java:
		1. for Loop
		2. while Loop
		3. if/else statement
		4. switch statement
General syntax of the for Loop
	for(initialization; continuation test; update) {
		<statement 1>
		<statement 2>
		.
		.
		.
	}


	for(int <variable>=1; <variable> <= n; <variable>++){
		<statement 1>
		<statement 2>
		<statement 3>
		.
		.
		.
	}


Flow chart for a for Loop

	Perform initialization once
		|
		|
		v
No				Yes
------Is the test true ------------------
|					|
|					|
|					v
|				Execute the statements in the for loop
|					|
|					v
|				Perform the update: i++
|
v
Execute any statement 
after the for Loop

Nested for Loops
	Exp
		for(int i=1; i<=3; i++) {
			for(int j = 1; j<-2; j++) {
				System.out.println("Hello");for
			}
		}
In this example the first for Loop controls a statement, and the inner for loop 
is itself a statement.

This code is probably easier to read from inside out.

		for(int i=1; i<=4; i++){
			for(int j=1; j<=3; j++){
				System.out.print(j + " ");
			}
		}


		for(int i = 1; i<=4; i++) {
			for(int j = 1; j<=i; j++){
				System.out.print("*");
			}
			println();
		}

Scope
	As programs get longer, it's likely that different parts of the program
	will interfere with each other.

	Java helps this situation by enforcing rules of scope

	Scope
		The part of a program in which a particular declaration is valid.

	The simple rule is that the scope of a variable extends from the point where it
	was declared to the } that encloses it.

	Local variable
		A variable declared inside a method that is accessible only in that method.

There are a few special cases for scope, and the for oop is one of them.

Class Constant
	A named value that cannot be changed. A class constant can be accessed anywhere in
	the class
	i.e. it's scope is the entire class
	
	public static final <type><name> = <expression>

	Ex.
	public static final double INTEREST_RATE = 9.75;