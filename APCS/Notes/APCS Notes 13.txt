Chapter 13 - SEARCHING AND SORTING

Searching and Sorting
	
Sequential Search
	A sequential search starts at the first element and compares the key to each element in turn until the key is found, or until the end of the
	list is reached.

	If the list is sorted in ascending order, stop searching as soon as the key is greater than the current list element or until the end of the
	list is reached.

	Note: The best case has the key in the first slot. 
	The worst case is that the key is in the last slot or not in the list. All n elements must be examined.
	On average there will be n/2 comparisons.

Binary Search
	If the elements are in a sorted array, a divide-and-conquer approach is more efficient.

	The following recursive pseudo-code algorithm shows how BINARY SEARCH works.

	Assume that a[low]...a[high] is sorted in ascending order and that a method binSearch returns the index of key. If key is not in the array, 
	it returns -1.

Sorting
	Selection Sort
		This is a search and swap algorithm.

		 8	1	4	6
		[1]	8	4	6	After First Pass
		[1]	[4]	8	6	After Second Pass
		[1]	[4]	[6]	[8]	After Third Pass

		Here's how it works:
			1. Find the smallest element in the array and exchange it with a[0]
			2. Now find the smallest element in the subarray a[1]...a[n-1] and swap it with a[1]
			3. Continue this process until just the last two elements remain to be sorted, a[n-2] and a[n-1]. The smaller of these two 
			   elements is placed in a[n-2], the larger in a[n-1].

		Note: For an array of n elements the array is sorted after n-1 passes. After the kth pass, the first k elements are in their final sorted 
		      position.

	Insertion Sort
		[8]	[1,	4,	6]	
		[1,	8]	[4,	6]	First Pass
		[1,	4,	8]	[6]	Second Pass
		[1,	4,	6,	8]	Third Pass

		Think of the first element as being sorted with respect to itself. Now the array can be thought of as consisting of two parts: 
		(1) a sorted list followed by (2) an unsorted list.

		The idea is to move elements from the unsorted list to the sorted list one at a time. As each item is moved, it is inserted into its correct
		position in the sorted list. Elements in the sorted list will need to be shifted to make room for the new items.

		Note: For an array of n elements, it is sorted after n-1 passes. After the kth pass, a[0], a[1], a[2], ..., a[k] are sorted with respect 
		to each other. Worst case is if it's in reverse. Best case is if it is in sorted order.

Recursive Sorts
	Selection and Insertion sorts are inefficient for large n. More efficient divide-and-conquer algorithms can be used.

Mergesort
	Here is a recursive definition of how mergesort works:
	
	If there is more than one element
		- break the array into two halves
		- mergesort the left half
		- mergesort the right half
		- merge the two subarrays into a sorted array
	
	Mergesort uses a merge method to merge two sorted pices of an array into a single sorted array.

Quicksort
	For large n, quicksort, on average, is the fastest known sorting algorithm.

	Here is a recursive description of how quicksort works.

	If there's at least two elements two elements in the array
		- Partition the array
		- Quicksort the left subarray
		- Quicksort the right subarray

	Notes:
		1) You need three pointers: The left pointer (L), a right pointer (R), and you need a pivot pointer (P)
		2) The pivot can start anywhere; sometimes the starting point of the pivot is randomly selected
		3) Once the left pointer, the right pointer, and the pivot pointer line up, that value is in its correct place. At this point, all the 
		   values to the left of the pivot are smaller and all the values to the right of the pivot are larger.
		4) Also, remember that the pointer that is attached to the pivot does not move The other pointer always move towards the pivot.
		5) If you have repeated items, it does not matter which side they are on, just be consistent. For example, always put the new, repeated item
		   on the right.