		    Explanation of Stack Calculator Circuit

Data Section: The guts is a hardware stack, which looks like a series of
parallel, vertical up-down shift registers.  The inputs go to the top elements
and the outputs come from the top elements.  The two control inputs are a push
and pop signal that drive both the multiplexer inputs and the clock inputs.  The
top element of the stack is treated differently because it also must be loaded
from the output of the ALU to perform a calculation.  Thus, it is a
parallel-load register that can be loaded from three different places depending
on its control inputs: The display register (push), the second element of the
stack (pop), or the ALU (load).  Above the top element of the stack is the
display register that holds the data shown in the display tubes.  It is a
parallel-load shift register that accepts numbers either digit-serially from the
key pad (shift) or in parallel from the top of the stack to display results
(default).  Directly connected to the display register is the seven-segment
decoders and the actual display tubes themselves.  There is also a combinational
ALU to actually perform the calculations, a BCD encoder to translate the ten
lines from the numeric keypad into BCD digits, and an encoder to encode the
operation keys for the ALU function select lines.

Control Section: The first thing to note is that throughout the circuit,
positive level signals are used to select multiplexers, and edge-triggered
flip-flops are then clocked on the falling edge of those signals by inverting
the clock inputs.  This prevents timing problems by making use of both phases of
each clock cycle.  Also note that the control section is purely combinational,
or in other words has only one state.  When a number key is pressed, the display
register selects shift mode, the number is encoded into BCD, and then when the
number key is released, the value is clocked into the shift register on the
falling edge of the signal.  When the enter key is pressed, the multiplexers in
the top of the stack and the rest of the stack are set to push their values down
one level in the stack, and when the enter key is released, the registers are
clocked on the falling edge of the signal.  The display register is also cleared
by a delayed version of the enter signal.  Similarly, when the equal key is
pressed, all the values in the stack and the display register are popped up one
level, again on the falling edge of the signal.  Finally, when an operation key
is pressed, the stack is put in pop mode, except for the top element which is
set to load from the ALU.  The operation key is encoded and passed into the ALU.
The inputs to the ALU come from the top two elements of the stack.  On the
falling edge of the operation key, the top and rest of the stack are clocked,
and the display register is unaffected.  This has the same effect as popping the
top two elements off the stack, combining them with the operation, and pushing
the result back on the stack but is done in a single clock cycle.







